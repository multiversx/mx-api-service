# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Integration API

env:
  CODECOV_VERSION: 'v0.3.1'

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main, development]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379
      mysql:
        image: mysql:8
        env:
          MYSQL_USER: user
          MYSQL_PASSWORD: password
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: api
        ports:
          - 3306
        options: --health-cmd "mysqladmin ping" --health-interval 10s --health-timeout 5s --health-retries 10
      rabbitmq:
        image: rabbitmq:3-alpine
        ports:
          - 5672:5672
    steps:
      - name: Set up MySQL
        run: |
          sudo /etc/init.d/mysql start
          mysql -e 'CREATE DATABASE IF NOT EXISTS api;' -uroot -proot
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - name: Initialize
        run: npm run init
      - name: Warm
        run: |
          if ${{ github.ref == 'refs/heads/main' }}; then
            npm run test:e2e:warm
          else
            npm run test:e2e:warm:mocked
          fi
        shell: bash
      - name: Run integration tests
        run: npm run test:e2e:cov
      - uses: codecov/codecov-action@v3
        with:
          files: ./coverage/e2e/clover.xml
          version: ${{ env.CODECOV_VERSION }}
          flags: integrationtests
          name: codecov-umbrella
          fail_ci_if_error: true
          verbose: true
