# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""About object type."""
type About {
  """Application Version details."""
  appVersion: String!

  """Deployment cluster."""
  cluster: String!

  """Feature Flags."""
  features: FeatureConfigs

  """Gateway version."""
  gatewayVersion: String

  """Indexer version."""
  indexerVersion: String

  """Current network details."""
  network: String!

  """Plugins Version details."""
  pluginsVersion: String!

  """Scam engine version."""
  scamEngineVersion: String

  """API deployment version."""
  version: String!
}

"""Account object type."""
type Account {
  """Address for the given account."""
  address: ID!

  """Account assets for the given account."""
  assets: AccountAssets

  """Balance for the given account."""
  balance: String!

  """DeployTxHash for the given detailed account."""
  deployTxHash: String

  """Deployment timestamp for the given detailed account."""
  deployedAt: Float

  """If the given detailed account is verified."""
  isVerified: Boolean

  """Nonce for the given account."""
  nonce: Float!

  """Current owner address."""
  ownerAddress: String!

  """Owner Account Address assets details."""
  ownerAssets: AccountAssets

  """Smart contract results count for the given detailed account."""
  scrCount: Float!

  """Shard for the given account."""
  shard: Float!

  """Timestamp of the block where the account was first indexed."""
  timestamp: Float!

  """Transactions count for the given detailed account."""
  txCount: Float!
}

"""Account assets object type."""
type AccountAssets {
  """Description for the given account asset."""
  description: String!

  """Icon for the given account asset."""
  icon: String

  """Icon PNG for the given account asset."""
  iconPng: String

  """Icon SVG for the given account asset."""
  iconSvg: String

  """Name for the given account asset."""
  name: String!

  """Proof for the given account asset."""
  proof: String

  """Social for the given account asset."""
  social: String!

  """Tags list for the given account asset."""
  tags: [String!]!
}

"""Account delegation object type that extends Account."""
type AccountDelegation {
  """Address for the given detailed account."""
  address: String!

  """Claimable Rewards for the given detailed account."""
  claimableRewards: String!

  """Contract for the given detailed account."""
  contract: String!

  """UserActiveStake for the given detailed account."""
  userActiveStake: String!

  """UserUnBondable for the given detailed account."""
  userUnBondable: String!

  """UserUndelegatedList for the given detailed account."""
  userUndelegatedList: AccountUndelegation!
}

"""Account delegation legacy."""
type AccountDelegationLegacy {
  """Claimable rewards for the given detailed account."""
  claimableRewards: String!

  """User active stake for the given detailed account."""
  userActiveStake: String!

  """User deferred payment stake for the given detailed account."""
  userDeferredPaymentStake: String!

  """User unstaked stake for the given detailed account."""
  userUnstakedStake: String!

  """User waiting stake for the given detailed account."""
  userWaitingStake: String!

  """User withdraw only stake for the given detailed account."""
  userWithdrawOnlyStake: String!
}

"""Detailed Account object type that extends Account."""
type AccountDetailed {
  """Address for the given account."""
  address: ID!

  """Account assets for the given account."""
  assets: AccountAssets

  """Balance for the given account."""
  balance: String!

  """Code for the given detailed account."""
  code: String!

  """Code hash for the given detailed account."""
  codeHash: String

  """Contracts for the given detailed account."""
  contractAccount(
    """Input to retrieve the given contracts for."""
    input: GetFromAndSizeInput!
  ): [DeployedContract!]

  """Contracts count for the given detailed account."""
  contractAccountCount: Float!

  """
  Summarizes all delegation positions with staking providers, together with unDelegation positions for the givven detailed account.
  """
  delegation: [AccountDelegation!]!

  """Returns staking information related to the legacy delegation pool."""
  delegationLegacy: AccountDelegationLegacy!

  """DeployTxHash for the given detailed account."""
  deployTxHash: String

  """Deployment timestamp for the given detailed account."""
  deployedAt: Float

  """Developer reward for the given detailed account."""
  developerReward: String!

  """Return account EGLD balance history."""
  historyAccount(
    """Input to retrieve the given EGLD balance history for."""
    input: GetAccountHistory!
  ): [AccountHistory!]!

  """Return account balance history for a specifc token."""
  historyTokenAccount(
    """Input to retrieve the given token history for."""
    input: GetHistoryTokenAccountInput!
  ): [AccountEsdtHistory!]!

  """If the given detailed account is payable."""
  isPayable: Boolean

  """If the given detailed account is payable by smart contract."""
  isPayableBySmartContract: Boolean

  """If the given detailed account is readable."""
  isReadable: Boolean

  """If the given detailed account is upgradeable."""
  isUpgradeable: Boolean

  """If the given detailed account is verified."""
  isVerified: Boolean

  """Returns all nodes in the node queue where the account is owner."""
  keys: [AccountKey!]!

  """NFT collections for the given detailed account."""
  nftCollections(
    """Input to retrieve the given NFT collections for."""
    input: GetNftCollectionsAccountInput!
  ): [NftCollectionAccountFlat!]

  """NFTs for the given detailed account."""
  nfts(
    """Input to retrieve the given NFTs for."""
    input: GetNftsAccountInput!
  ): [NftAccountFlat!]

  """Nonce for the given account."""
  nonce: Float!

  """Owner address for the given detailed account."""
  ownerAddress: String!

  """Owner Account Address assets details."""
  ownerAssets: AccountAssets

  """
  Returns smart contract results where the account is sender or receiver.
  """
  resultsAccount(
    """Input to retrieve the given sc results for."""
    input: GetFromAndSizeInput!
  ): [SmartContractResult!]!

  """
  Returns smart contract results count where the account is sender or receiver.
  """
  resultsAccountCount: Float!

  """Root hash for the given detailed account."""
  rootHash: String

  """Scam information for the given detailed account."""
  scamInfo: ScamInformation

  """Smart contracts count for the given detailed account."""
  scrCount: Float!

  """Shard for the given account."""
  shard: Float!

  """
  Summarizes total staked amount for the given provider, as well as when and how much unbond will be performed.
  """
  stake: ProviderStake!

  """Timestamp of the block where the account was first indexed."""
  timestamp: Float!

  """Tokens for the given detailed account."""
  tokensAccount(
    """Input to retrieve the given tokens for."""
    input: GetTokensAccountInput!
  ): [TokenWithBalanceAccountFlat!]

  """Transactions for the given detailed account."""
  transactionsAccount(
    """Input to retrieve the given transactions for."""
    input: GetTransactionsAccountInput!
  ): [Transaction!]

  """Transactions count for the given detailed account."""
  transactionsAccountCount(
    """Input to retrieve the given transctions count for."""
    input: GetTransactionsAccountCountInput!
  ): Float

  """
  Returns both transfers triggerred by a user account (type = Transaction), as well as transfers triggerred by smart contracts (type = SmartContractResult), thus providing a full picture of all in/out value transfers for a given account.
  """
  transfersAccount(
    """Input to retrieve the given transfers for."""
    input: GetTransfersAccountInput!
  ): [Transaction!]

  """Transactions count for the given detailed account."""
  txCount: Float!

  """Username for the given detailed account."""
  username: String
}

"""Account Esdt History object type."""
type AccountEsdtHistory {
  """Address for the given account."""
  address: String!

  """Balance for the given account."""
  balance: String!

  """Identifier for the given history account details."""
  identifier: String!

  """IsSender for the given account."""
  isSender: Boolean

  """Timestamp for the given account."""
  timestamp: Float!

  """Token for the given history account details."""
  token: String!
}

"""Detailed history object type that."""
type AccountHistory {
  """Address for the given account."""
  address: String!

  """Balance for the given account."""
  balance: String!

  """IsSender for the given account."""
  isSender: Boolean

  """Timestamp for the given account."""
  timestamp: Float!
}

"""Account key object type."""
type AccountKey {
  """Bls key for the given provider account."""
  blsKey: String!

  """Queue index for the given provider account ."""
  queueIndex: String

  """Queue size for the given provider account."""
  queueSize: String

  """Remaining UnBond Period for node with status leaving."""
  remainingUnBondPeriod: Float

  """Reward address for the given provider account ."""
  rewardAddress: String!

  """Stake for the given provider account."""
  stake: String!

  """Status for the given provider account."""
  status: String!

  """Top Up for the given  provideraccount."""
  topUp: String!
}

"""Account key filter object type."""
type AccountKeyFilter {
  """Account key status filter for the given keys."""
  status: AccountKeyFilter
}

"""Account undelegation object type that extends Account."""
type AccountUndelegation {
  """Amount for the given detailed account."""
  amount: String!

  """Seconds for the given detailed account."""
  seconds: Float!
}

"""Block object type."""
type Block {
  """Epoch for the given Block."""
  epoch: Float!

  """Gas Consumed for the given NFT."""
  gasConsumed: Float!

  """Gas Penalized for the given NFT."""
  gasPenalized: Float!

  """Gas Refunded for the given NFT."""
  gasRefunded: Float!

  """Hash for the given Block."""
  hash: String!

  """Max Gas Limit for the given NFT."""
  maxGasLimit: Float!

  """Nonce for the given Block."""
  nonce: Float!

  """Previous Hash for the given Block."""
  prevHash: String!

  """Proposer for the given Block."""
  proposer: String!

  """Proposer Identity for the given Block."""
  proposerIdentity: Identity!

  """Public Key Bitmap for the given Block."""
  pubKeyBitmap: String!

  """Round for the given Block."""
  round: Float!

  """Scheduled Root Hash for the given Block."""
  scheduledRootHash: String

  """Shard for the given Block."""
  shard: Float!

  """Size for the given Block."""
  size: Float!

  """Size Txs for the given Block."""
  sizeTxs: Float!

  """State Root Hash for the given Block."""
  stateRootHash: String!

  """Timestamp for the given Block."""
  timestamp: Float!

  """TxCount for the given NFT."""
  txCount: Float!
}

"""BlockDetailed object type."""
type BlockDetailed {
  """Epoch for the given Block."""
  epoch: Float!

  """Gas Consumed for the given NFT."""
  gasConsumed: Float!

  """Gas Penalized for the given NFT."""
  gasPenalized: Float!

  """Gas Refunded for the given NFT."""
  gasRefunded: Float!

  """Hash for the given Block."""
  hash: String!

  """Max Gas Limit for the given NFT."""
  maxGasLimit: Float!

  """MiniBlockHashes for the given block hash."""
  miniBlocksHashes: [String!]!

  """Nonce for the given Block."""
  nonce: Float!

  """NotarizedBlocksHashes for the given block hash."""
  notarizedBlocksHashes: [String!]!

  """Previous Hash for the given Block."""
  prevHash: String!

  """Proposer for the given Block."""
  proposer: String!

  """Proposer Identity for the given Block."""
  proposerIdentity: Identity!

  """Public Key Bitmap for the given Block."""
  pubKeyBitmap: String!

  """Round for the given Block."""
  round: Float!

  """Scheduled Root Hash for the given Block."""
  scheduledRootHash: String

  """Shard for the given Block."""
  shard: Float!

  """Size for the given Block."""
  size: Float!

  """Size Txs for the given Block."""
  sizeTxs: Float!

  """State Root Hash for the given Block."""
  stateRootHash: String!

  """Timestamp for the given Block."""
  timestamp: Float!

  """TxCount for the given NFT."""
  txCount: Float!

  """Validators for the given block hash."""
  validators: [String!]!
}

"""Collection auction statistics."""
type CollectionAuctionStats {
  """Number of active auctions."""
  activeAuctions: Float

  """Number of ended auctions."""
  endedAuctions: Float

  """Maximum price in EGLD."""
  maxPrice: String

  """Minimum (floor) price in EGLD."""
  minPrice: String

  """Ended auction average price in EGLD."""
  saleAverage: String

  """Total traded volume in EGLD."""
  volumeTraded: String
}

"""Collection roles object type."""
type CollectionRoles {
  """Address for the given collection roles."""
  address: String

  """If the given collection role can add quantity."""
  canAddQuantity: Boolean!

  """If the given collection role can add URI."""
  canAddUri: Boolean!

  """If the given collection role can burn."""
  canBurn: Boolean!

  """If the given collection role can create."""
  canCreate: Boolean!

  """
  If tokens from the given collections are allowed to be transferred by the given account.
  """
  canTransfer: Boolean!

  """If the given collection role can update attributes."""
  canUpdateAttributes: Boolean!

  """Roles list for the given collection roles."""
  roles: [String!]!
}

"""NFT collection trait type."""
type CollectionTrait {
  """Distinct attributes for the given trait."""
  attributes: [CollectionTraitAttribute!]!

  """Name of the trait."""
  name: String!

  """Number of times the trait appears in the nft list."""
  occurrenceCount: Float!

  """Percentage for the occurrence of the trait in the nft list."""
  occurrencePercentage: Float!
}

"""NFT collection trait attribute type."""
type CollectionTraitAttribute {
  """Name of the attribute."""
  name: String

  """Number of times the attribute appears in the nft list."""
  occurrenceCount: Float!

  """Percentage for the occurrence of the attribute in the nft list."""
  occurrencePercentage: Float!
}

"""DappConfig object type."""
type DappConfig {
  """Api url details"""
  apiAddress: String!

  """Api Timeout details"""
  apiTimeout: String!

  """ChainID details"""
  chainId: String!

  """Token details"""
  decimals: String!

  """Token denomination details"""
  egldDenomination: String!

  """Token label details"""
  egldLabel: String!

  """Explorer address details"""
  explorerAddress: String!

  """Gas data byte details"""
  gasPerDataByte: String!

  """Network Details."""
  id: ID!

  """Network name."""
  name: String!

  """Wallet url details"""
  walletAddress: String!

  """Bridge wallet url details"""
  walletConnectBridgeAddresses: [String!]!

  """Wallet connect url details"""
  walletConnectDeepLink: String!
}

"""Delegation object type."""
type Delegation {
  """Locked details."""
  locked: String!

  """MinDelegation details."""
  minDelegation: String!

  """Stake details."""
  stake: String!

  """TopUp details."""
  topUp: String!
}

"""DelegationLegacy object type."""
type DelegationLegacy {
  """Total number of users."""
  numUsers: Float!

  """Total Active Stake details."""
  totalActiveStake: String!

  """Total Deferred Payment Stake details."""
  totalDeferredPaymentStake: String!

  """Total Unstake Stake details"""
  totalUnstakedStake: String!

  """Total Waiting Stake details."""
  totalWaitingStake: String!

  """Total Withdraw Only Stake details."""
  totalWithdrawOnlyStake: String!
}

"""Deployed contract object type."""
type DeployedContract {
  """Address for the given account."""
  address: String!

  """Assets for the given account."""
  assets: AccountAssets

  """DeployTxHash for the given account."""
  deployTxHash: String!

  """Timestamp for the given account."""
  timestamp: Float!
}

"""Economics object type."""
type Economics {
  """Total Supply general information."""
  apr: Float!

  """Total Supply general information."""
  baseApr: Float!

  """Total Supply general information."""
  circulatingSupply: Float!

  """Total Supply general information."""
  marketCap: Float

  """Total Supply general information."""
  price: Float

  """Total Supply general information."""
  staked: Float!

  """Total Supply general information."""
  tokenMarketCap: Float

  """Total Supply general information."""
  topUpApr: Float!

  """Total Supply general information."""
  totalSupply: Float!
}

"""ESDT data source."""
enum EsdtDataSource {
  """Elastic data source."""
  elastic

  """Gateway data source."""
  gateway
}

"""EsdtLockedAccount object type."""
type EsdtLockedAccount {
  """Locked account address."""
  address: String!

  """Locked account balance."""
  balance: String!

  """Locked account name."""
  name: String
}

"""Esdt type enum."""
enum EsdtType {
  """Fungible ESDT token type."""
  FungibleESDT

  """Meta ESDT token type."""
  MetaESDT

  """Non-fungible ESDT token type."""
  NonFungibleESDT

  """Semi-fungible ESDT token type."""
  SemiFungibleESDT
}

"""FeatureConfigs object type."""
type FeatureConfigs {
  """DataApi flag details."""
  dataApi: Boolean!

  """Exchange flag details."""
  exchange: Boolean!

  """Marketplace flag details."""
  marketplace: Boolean!

  """Update Collection Extra Details flag details."""
  updateCollectionExtraDetails: Boolean!
}

"""Input to retrieve the given detailed account for."""
input GetAccountDetailedInput {
  """Address to retrieve the corresponding detailed account for."""
  address: ID! = ""
}

"""Input to retrieve the given accounts for."""
input GetAccountFilteredInput {
  """Owner address to retrieve for the given result set."""
  ownerAddress: String
}

"""Input to retrieve the given transactions count for."""
input GetAccountHistory {
  """After timestamp for the given result set."""
  after: Float

  """Before timestamp for the given result set."""
  before: Float

  """Number of collections to skip for the given result set."""
  from: Float = 0

  """Number of collections to retrieve for the given result set."""
  size: Float = 25
}

"""Input to retrieve the given accounts for."""
input GetAccountsInput {
  """Number of accounts to skip for the given result set."""
  from: Float = 0

  """Owner address to retrieve for the given result set."""
  ownerAddress: String

  """Number of accounts to retrieve for the given result set."""
  size: Float = 25
}

"""Input to retrieve the given hash block for."""
input GetBlockHashInput {
  """Specific block hash to retrieve the corresponding blocks for."""
  hash: ID! = ""
}

"""Input to retrieve the given blocks for."""
input GetBlocksCountInput {
  """Epoch for the given result set."""
  epoch: Float

  """Nonce for the given result set."""
  nonce: Float

  """Proposer for the given result set."""
  proposer: String

  """Shard ID for the given result set."""
  shard: Float

  """Validator for the given result set."""
  validator: String
}

"""Input to retrieve the given blocks for."""
input GetBlocksInput {
  """Epoch for the given result set."""
  epoch: Float

  """Number of blocks to skip for the given result set."""
  from: Float = 0

  """Nonce for the given result set."""
  nonce: Float

  """Proposer for the given result set."""
  proposer: String

  """Shard ID for the given result set."""
  shard: Float

  """Number of blocks to retrieve for the given result set."""
  size: Float = 25

  """Validator for the given result set."""
  validator: String

  """Provide identity information for proposer node."""
  withProposerIdentity: Boolean
}

"""Input to retrieve the given from and size for."""
input GetFromAndSizeInput {
  """Number of collections to skip for the given result set."""
  from: Float = 0

  """Number of collections to retrieve for the given result set."""
  size: Float = 25
}

"""Input to retrieve the given history token for."""
input GetHistoryTokenAccountInput {
  """After timestamp for the given result set."""
  after: Float

  """Before timestamp for the given result set."""
  before: Float

  """Number of collections to skip for the given result set."""
  from: Float = 0

  """Identifier token to retrieve for the given result set."""
  identifier: ID! = ""

  """Number of collections to retrieve for the given result set."""
  size: Float = 25
}

"""Input to retrieve the given identity for."""
input GetIndentityInput {
  """list of identities."""
  identities: [String!]
}

"""Input to retrieve the given mex farms for."""
input GetMexFarmsInput {
  """Number of mex farms to skip for the given result set."""
  from: Float = 0

  """Number of mex farms to retrieve for the given result set."""
  size: Float = 25
}

"""Input to retrieve the given mex token for."""
input GetMexTokenInput {
  """Identifier to retrieve the corresponding mex token for."""
  id: ID! = ""
}

"""Input to retrieve the given mex tokens pairs by quote and baseId for."""
input GetMexTokenPairsByQuotePairIdInput {
  """Number of mex tokens pair to skip for the given result set."""
  baseId: String!

  """Number of mex tokens pair to retrieve for the given result set."""
  quoteId: String!
}

"""Input to retrieve the given mex tokens pairs for."""
input GetMexTokenPairsInput {
  """Number of mex tokens pair to skip for the given result set."""
  from: Float = 0

  """Number of mex tokens pair to retrieve for the given result set."""
  size: Float = 25
}

"""Input to retrieve the given mex tokens for."""
input GetMexTokensInput {
  """Number of mex tokens to skip for the given result set."""
  from: Float = 0

  """Number of mex tokens to retrieve for the given result set."""
  size: Float = 25
}

"""Input to retrieve the given  block for."""
input GetMiniBlockHashInput {
  """Specific mini block hash to retrieve the corresponding block for."""
  miniBlockHash: ID! = ""
}

"""Input to retrieve the given NFT collection for."""
input GetNftCollectionInput {
  """
  Collection identifier to retrieve the corresponding NFT collection for.
  """
  collection: ID! = ""
}

"""Input to retrieve the given NFT collections for."""
input GetNftCollectionsAccountInput {
  """Number of NFT collections to skip for the given result set."""
  from: Float = 0

  """Collection identifier to retrieve for the given result set."""
  search: ID

  """Number of NFT collections to retrieve for the given result set."""
  size: Float = 25

  """NFT types list to retrieve for the given result set."""
  type: [NftType!]
}

"""Input to retrieve the given NFT collections count for."""
input GetNftCollectionsCountInput {
  """After timestamp to retrieve for the given result set."""
  after: Float

  """Before timestamp to retrieve for the given result set."""
  before: Float

  """Can add quantity to retrieve for the given result set."""
  canAddQuantity: String

  """Can add URI to retrieve for the given result set."""
  canAddUri: String

  """Can burn to retrieve for the given result set."""
  canBurn: String

  """Can transfer role to retrieve for the given result set."""
  canTransferRole: String

  """Can update attributes to retrieve for the given result set."""
  canUpdateAttributes: String

  """
  Do not include collections of type "MetaESDT" in the responsee for the given result set.
  """
  excludeMetaESDT: Boolean

  """Collection identifier to retrieve for the given result set."""
  search: ID

  """NFT types list to retrieve for the given result set."""
  type: [NftType!]
}

"""Input to retrieve the given NFT collections for."""
input GetNftCollectionsInput {
  """After timestamp to retrieve for the given result set."""
  after: Float

  """Before timestamp to retrieve for the given result set."""
  before: Float

  """Can add quantity to retrieve for the given result set."""
  canAddQuantity: String

  """Can add URI to retrieve for the given result set."""
  canAddUri: String

  """Can burn to retrieve for the given result set."""
  canBurn: String

  """Can transfer role to retrieve for the given result set."""
  canTransferRole: String

  """Can update attributes to retrieve for the given result set."""
  canUpdateAttributes: String

  """
  Do not include collections of type "MetaESDT" in the responsee for the given result set.
  """
  excludeMetaESDT: Boolean

  """Number of NFT collections to skip for the given result set."""
  from: Float = 0

  """
  Collection comma-separated identifiers to retrieve for the given result set.
  """
  identifiers: [ID!]

  """Collection identifier to retrieve for the given result set."""
  search: ID

  """Number of NFT collections to retrieve for the given result set."""
  size: Float = 25

  """NFT types list to retrieve for the given result set."""
  type: [NftType!]
}

"""Input to retrieve the given NFT for."""
input GetNftInput {
  """Identifier to retrieve the corresponding NFT for."""
  identifier: ID! = ""
}

"""Input to retrieve the given NFTs for."""
input GetNftsAccountInput {
  """Collections to retrieve for the given result set."""
  collections: [String!]

  """Creator to retrieve for the given result set."""
  creator: String

  """
  Do not include collections of type "MetaESDT" in the responsee for the given result set.
  """
  excludeMetaESDT: Boolean

  """Number of collections to skip for the given result set."""
  from: Float = 0

  """Has URIs to retrieve for the given result set."""
  hasUris: Boolean

  """
  NFT comma-separated identifiers list to retrieve for the given result set.
  """
  identifiers: [ID!]

  """Include flagged to retrieve for the given result set."""
  includeFlagged: Boolean

  """Name to retrieve for the given result set."""
  name: String

  """NFT identifier to retrieve for the given result set."""
  search: String

  """Number of collections to retrieve for the given result set."""
  size: Float = 25

  """Source to retrieve for the given result set."""
  source: EsdtDataSource

  """Tags list to retrieve for the given result set."""
  tags: [String!]

  """NFT type to retrieve for the given result set."""
  type: NftType

  """With supply to retrieve for the given result set."""
  withSupply: Boolean
}

"""Input to retrieve the given NFTs count for."""
input GetNftsCountInput {
  """After timestamp to retrieve for the given result set."""
  after: Float

  """Before timestamp to retrieve for the given result set."""
  before: Float

  """Collection identifier for the given result set."""
  collection: ID = ""

  """Creator to retrieve for the given result set."""
  creator: String

  """Has URIs to retrieve for the given result set."""
  hasUris: Boolean

  """
  NFT comma-separated identifiers list to retrieve for the given result set.
  """
  identifiers: [ID!]

  """Is NSFW to retrieve for the given result set."""
  isNsfw: Boolean

  """Is whitelisted storage to retrieve for the given result set."""
  isWhitelistedStorage: Boolean

  """Name to retrieve for the given result set."""
  name: String

  """Nonce to retrieve for the given result set."""
  nonce: Float

  """NFT identifier to retrieve for the given result set."""
  search: String

  """Tags list to retrieve for the given result set."""
  tags: [String!]

  """NFT type to retrieve for the given result set."""
  type: NftType
}

"""Input to retrieve the given NFTs for."""
input GetNftsInput {
  """After timestamp to retrieve for the given result set."""
  after: Float

  """Before timestamp to retrieve for the given result set."""
  before: Float

  """Collection identifier for the given result set."""
  collection: ID = ""

  """Creator to retrieve for the given result set."""
  creator: String

  """Number of collections to skip for the given result set."""
  from: Float = 0

  """Has URIs to retrieve for the given result set."""
  hasUris: Boolean

  """
  NFT comma-separated identifiers list to retrieve for the given result set.
  """
  identifiers: [ID!]

  """Is NSFW to retrieve for the given result set."""
  isNsfw: Boolean

  """Is whitelisted storage to retrieve for the given result set."""
  isWhitelistedStorage: Boolean

  """Name to retrieve for the given result set."""
  name: String

  """Nonce to retrieve for the given result set."""
  nonce: Float

  """NFT identifier to retrieve for the given result set."""
  search: String

  """Number of collections to retrieve for the given result set."""
  size: Float = 25

  """Tags list to retrieve for the given result set."""
  tags: [String!]

  """NFT type to retrieve for the given result set."""
  type: NftType

  """With owner to retrieve for the given result set."""
  withOwner: Boolean

  """With supply to retrieve for the given result set."""
  withSupply: Boolean
}

"""Input to retrieve the given bls node for."""
input GetNodeBlsInput {
  """Bls to retrieve the corresponding node for."""
  bls: String = ""
}

"""Input to retreive the given nodes count for."""
input GetNodesCountInput {
  """Auctioned filter for the given result set."""
  auctioned: Boolean

  """FullHistory filter for the given result set."""
  fullHistory: Boolean

  """Identity filter for the given result set."""
  identity: String

  """Issues filter for the given result set."""
  issues: Boolean

  """Online filter for the given result set."""
  online: Boolean

  """Order filter for the given result set."""
  order: SortOrder

  """Owner filter for the given result set."""
  owner: String

  """Provider filter for the given result set."""
  provider: String

  """Search for the given result set."""
  search: String

  """Shard ID for the given result set."""
  shard: Float

  """Sort filter for the given result set."""
  sort: NodeSort

  """Status filter for the given result set."""
  status: NodeStatus

  """Type filter for the given result set."""
  type: NodeType
}

"""Input to retrieve the given nodes for."""
input GetNodesInput {
  """Auctioned filter for the given result set."""
  auctioned: Boolean

  """Number of blocks to skip for the given result set."""
  from: Float = 0

  """FullHistory filter for the given result set."""
  fullHistory: Boolean

  """Identity filter for the given result set."""
  identity: String

  """Issues filter for the given result set."""
  issues: Boolean

  """Online filter for the given result set."""
  online: Boolean

  """Order filter for the given result set."""
  order: SortOrder

  """Owner filter for the given result set."""
  owner: String

  """Provider filter for the given result set."""
  provider: String

  """Search for the given result set."""
  search: String

  """Shard ID for the given result set."""
  shard: Float

  """Number of blocks to retrieve for the given result set."""
  size: Float = 25

  """Sort filter for the given result set."""
  sort: NodeSort

  """Status filter for the given result set."""
  status: NodeStatus

  """Type filter for the given result set."""
  type: NodeType
}

"""Input to retrieve the given provider for."""
input GetProviderByAddressInput {
  """Identity provider for the given result set."""
  address: String = ""
}

"""Input to retrieve the given provider for."""
input GetProviderInput {
  """Identity provider for the given result set."""
  identity: String = ""
}

"""Input to retrieve the given rounds for."""
input GetRoundInput {
  """Round for the given result set."""
  round: Float!

  """Epoch for the given result set."""
  shard: Float!
}

"""Input to retreive the given rounds count for."""
input GetRoundsCountInput {
  """Epoch for the given result set."""
  epoch: Float

  """Shard ID for the given result set."""
  shard: Float

  """Validator for the given result set."""
  validator: String
}

"""Input to retrieve the given rounds for."""
input GetRoundsInput {
  """Epoch for the given result set."""
  epoch: Float

  """Number of blocks to skip for the given result set."""
  from: Float = 0

  """Shard ID for the given result set."""
  shard: Float

  """Number of blocks to retrieve for the given result set."""
  size: Float = 25

  """Validator for the given result set."""
  validator: String
}

"""Input to retrieve the given tags for."""
input GetShardInput {
  """Number of shards to skip for the given result set."""
  from: Float = 0

  """Number of shards to retrieve for the given result set."""
  size: Float = 25
}

"""Input to retrieve the given smart contract hash for."""
input GetSmartContractHashInput {
  """scHash for the given smart contract set."""
  scHash: String!
}

"""Input to retrieve the given smart contract results for."""
input GetSmartContractResultInput {
  """Number of blocks to skip for the given result set."""
  from: Float = 0

  """Miniblockhash txHash for the given result set."""
  miniBlockHash: String

  """Original TxHashes for the given result set."""
  originalTxHashes: [String!]

  """Number of blocks to retrieve for the given result set."""
  size: Float = 25
}

"""Input to retrieve the given tags for."""
input GetTagsInput {
  """Number of tags to skip for the given result set."""
  from: Float = 0

  """Number of tags to retrieve for the given result set."""
  size: Float = 25
}

"""Input to retrieve the given token accounts for."""
input GetTokenAccountsInput {
  """Number of tokens to skip for the given result set."""
  from: Float = 0

  """Identifier to retrieve the corresponding token for."""
  identifier: ID! = ""

  """Number of tokens to retrieve for the given result set."""
  size: Float = 25
}

"""Input to retrieve the given token for."""
input GetTokenInput {
  """Identifier to retrieve the corresponding token for."""
  identifier: ID! = ""
}

"""Input to retrieve the given token role address for."""
input GetTokenRolesForIdentifierAndAddressInput {
  """Address to retrieve the corresponding token roles for."""
  address: ID! = ""

  """Identifier to retrieve the corresponding token for."""
  identifier: ID! = ""
}

"""Input to retrieve the given tokens for."""
input GetTokensAccountInput {
  """Number of tokens to skip for the given result set."""
  from: Float = 0

  """Search by token identifier for the given result set."""
  identifier: ID

  """
  Token comma-separated identifiers list to retrieve for the given result set.
  """
  identifiers: [String!]

  """Name to retrieve for the given result set."""
  name: String

  """Token identifier to retrieve for the given result set."""
  search: String

  """Number of tokens to retrieve for the given result set."""
  size: Float = 25
}

"""Input to retreive the given tokens count for."""
input GetTokensCountInput {
  """Identifier filter for the given tokens set."""
  identifier: String

  """Identifiers filter for the given tokens set."""
  identifiers: [String!]

  """Name filter for the given tokens set."""
  name: String

  """Search filter for the given tokens set."""
  search: String
}

"""Input to retreive the given tokens count for."""
input GetTokensInput {
  """Number of tokens to skip for the given result set."""
  from: Float = 0

  """Identifier filter for the given tokens set."""
  identifier: String

  """Identifiers filter for the given tokens set."""
  identifiers: [String!]

  """Name filter for the given tokens set."""
  name: String

  """Order filter for the given tokens set."""
  order: SortOrder

  """Search filter for the given tokens set."""
  search: String

  """Number of tokens to retrieve for the given result set."""
  size: Float = 25

  """Sort filter for the given tokens set."""
  sort: TokenSort
}

"""Input to retrieve the given detailed transaction for."""
input GetTransactionDetailedInput {
  """Hash to retrieve the corresponding detailed transaction for."""
  hash: String! = ""
}

"""Input to retrieve the given transactions count for."""
input GetTransactionsAccountCountInput {
  """After timestamp for the given result set."""
  after: Float

  """Before timestamp for the given result set."""
  before: Float

  """Filter transactions by function name for the given result set."""
  function: String

  """
  Filter by a comma-separated list of transaction hashes for the given result set.
  """
  hashes: [String!]

  """Mini block hash for the given result set."""
  miniBlockHash: String

  """Receiver for the given result set."""
  receiver: [String!]

  """Receiver shard for the given result set."""
  receiverShard: Float

  """Search in data object for the given result set."""
  search: String

  """Sender for the given result set."""
  sender: String

  """Sender shard for the given result set."""
  senderShard: Float

  """Status of the transaction for the given result set."""
  status: TransactionStatus

  """Token identfier for the given result set."""
  token: String
}

"""Input to retrieve the given transactions for."""
input GetTransactionsAccountInput {
  """After timestamp for the given result set."""
  after: Float

  """Before timestamp for the given result set."""
  before: Float

  """Number of transactions to skip for the given result set."""
  from: Float = 0

  """Filter transactions by function name for the given result set."""
  function: String

  """
  Filter by a comma-separated list of transaction hashes for the given result set.
  """
  hashes: [String!]

  """Mini block hash for the given result set."""
  miniBlockHash: String

  """Order transactions for the given result set."""
  order: SortOrder

  """Receiver for the given result set."""
  receiver: [String!]

  """Receiver shard for the given result set."""
  receiverShard: Float

  """Search in data object for the given result set."""
  search: String

  """Sender for the given result set."""
  sender: String

  """Sender shard for the given result set."""
  senderShard: Float

  """Number of transactions to retrieve for the given result set."""
  size: Float = 25

  """Status of the transaction for the given result set."""
  status: TransactionStatus

  """Token identfier for the given result set."""
  token: String

  """After timestamp for the given result set."""
  withLogs: Boolean

  """After timestamp for the given result set."""
  withOperations: Boolean

  """After timestamp for the given result set."""
  withScResults: Boolean

  """After timestamp for the given result set."""
  withScamInfo: Boolean

  """After timestamp for the given result set."""
  withUsername: Boolean
}

"""Input to retrieve the given transactions count for."""
input GetTransactionsCountInput {
  """After timestamp for the given result set."""
  after: Float

  """Before timestamp for the given result set."""
  before: Float

  """Condition for ElasticSearch queries for the given result set."""
  condition: String

  """Filter transactions by function name for the given result set."""
  function: String

  """
  Filter by a comma-separated list of transaction hashes for the given result set.
  """
  hashes: [String!]

  """Mini block hash for the given result set."""
  miniBlockHash: String

  """Receiver for the given result set."""
  receiver: String

  """Receiver shard for the given result set."""
  receiverShard: Float

  """Search in data object for the given result set."""
  search: String

  """Sender for the given result set."""
  sender: String

  """Sender shard for the given result set."""
  senderShard: Float

  """Status of the transaction for the given result set."""
  status: TransactionStatus

  """Token identfier for the given result set."""
  token: String
}

"""Input to retrieve the given transactions for."""
input GetTransactionsInput {
  """After timestamp for the given result set."""
  after: Float

  """Before timestamp for the given result set."""
  before: Float

  """Sort order for the given result set."""
  condition: SortOrder

  """Number of transactions to skip for the given result set."""
  from: Float = 0

  """Filter transactions by function name for the given result set."""
  function: String

  """
  Filter by a comma-separated list of transaction hashes for the given result set.
  """
  hashes: [String!]

  """Mini block hash for the given result set."""
  miniBlockHash: String

  """Receiver for the given result set."""
  receiver: String

  """Receiver shard for the given result set."""
  receiverShard: Float

  """Search in data object for the given result set."""
  search: String

  """Sender for the given result set."""
  sender: String

  """Sender shard for the given result set."""
  senderShard: Float

  """Number of transactions to retrieve for the given result set."""
  size: Float = 25

  """Status of the transaction for the given result set."""
  status: TransactionStatus

  """Token identfier for the given result set."""
  token: String

  """Request scam info for the given result set."""
  withScamInfo: Boolean

  """
  Integrates username in assets for all addresses present in the result set.
  """
  withUsername: Boolean
}

"""Input to retrieve the given transfers for."""
input GetTransfersAccountInput {
  """After timestamp for the given result set."""
  after: Float

  """Before timestamp for the given result set."""
  before: Float

  """Number of transactions to skip for the given result set."""
  from: Float = 0

  """Filter transactions by function name for the given result set."""
  function: String

  """
  Filter by a comma-separated list of transaction hashes for the given result set.
  """
  hashes: [String!]

  """Mini block hash for the given result set."""
  miniBlockHash: String

  """Order transactions for the given result set."""
  order: SortOrder

  """Receiver for the given result set."""
  receiver: [String!]

  """Receiver shard for the given result set."""
  receiverShard: Float

  """Search in data object for the given result set."""
  search: String

  """Sender for the given result set."""
  sender: String

  """Sender shard for the given result set."""
  senderShard: Float

  """Number of transactions to retrieve for the given result set."""
  size: Float = 25

  """Status of the transaction for the given result set."""
  status: TransactionStatus

  """Token identfier for the given result set."""
  token: String

  """After timestamp for the given result set."""
  withScamInfo: Boolean

  """After timestamp for the given result set."""
  withUsername: Boolean
}

"""Input to retrieve the given transfers count for."""
input GetTransfersCountInput {
  """After timestamp for the given result set."""
  after: Float

  """Before timestamp for the given result set."""
  before: Float

  """
  Filter by a comma-separated list of transaction hashes for the given result set.
  """
  hashes: [String!]

  """Mini block hash for the given result set."""
  miniBlockHash: String

  """SortOrder data transfers for the given result set."""
  order: SortOrder

  """Receiver for the given result set."""
  receiver: String

  """Receiver shard for the given result set."""
  receiverShard: Float

  """Search in data object for the given result set."""
  search: String

  """Sender for the given result set."""
  sender: String

  """Sender shard for the given result set."""
  senderShard: Float

  """Status of the transaction for the given result set."""
  status: TransactionStatus

  """Token identfier for the given result set."""
  token: String
}

"""Input to retrieve the given transfers for."""
input GetTransfersInput {
  """After timestamp for the given result set."""
  after: Float

  """Before timestamp for the given result set."""
  before: Float

  """Number of transfers to skip for the given result set."""
  from: Float = 0

  """
  Filter by a comma-separated list of transaction hashes for the given result set.
  """
  hashes: [String!]

  """Mini block hash for the given result set."""
  miniBlockHash: String

  """SortOrder data transfers for the given result set."""
  order: SortOrder

  """Receiver for the given result set."""
  receiver: String

  """Receiver shard for the given result set."""
  receiverShard: Float

  """Search in data object for the given result set."""
  search: String

  """Sender for the given result set."""
  sender: String

  """Sender shard for the given result set."""
  senderShard: Float

  """Number of transfers to retrieve for the given result set."""
  size: Float = 25

  """Status of the transaction for the given result set."""
  status: TransactionStatus

  """Token identfier for the given result set."""
  token: String

  """Request scam info for the given result set."""
  withScamInfo: Boolean

  """
  Integrates username in assets for all addresses present in the result set.
  """
  withUsername: Boolean
}

"""Input to retrieve the given account details for."""
input GetUsernameInput {
  """Username"""
  username: String! = ""
}

"""Input to retrieve the given waiting-list for."""
input GetWaitingListInput {
  """Number of waiting-list to skip for the given result set."""
  from: Float = 0

  """Number of waiting-list to retrieve for the given result set."""
  size: Float = 25
}

"""GlobalStake object type."""
type GlobalStake {
  """Active validators."""
  activeValidators: Float!

  """All Staked Nodes."""
  allStakedNodes: Float!

  """Auction Validators."""
  auctionValidators: Float!

  """Danger Zone Validators."""
  dangerZoneValidators: Float!

  """Eligible Validators."""
  eligibleValidators: Float!

  """Minimum Auction Qualified Stake information."""
  minimumAuctionQualifiedStake: String

  """Minimum Auction Qualified Top Up information."""
  minimumAuctionQualifiedTopUp: String

  """Nakamoto Coefficient."""
  nakamotoCoefficient: Float!

  """Qualified Auction Validators."""
  qualifiedAuctionValidators: Float!

  """Validators queue size."""
  queueSize: Float!

  """Total stake amount."""
  totalStaked: Float!

  """Total validators."""
  totalValidators: Float!

  """Not Eligible Validators."""
  waitingValidators: Float!
}

"""Identity object type."""
type Identity {
  """Provider apr details."""
  apr: Float

  """Provider avatar."""
  avatar: String

  """Provider description details."""
  description: String

  """Provider distribution details."""
  distribution: JSON

  """Identity provider."""
  identity: String

  """Provider location details."""
  location: String

  """Provider locked ESDT details."""
  locked: String

  """Provider name details."""
  name: String

  """Providers details."""
  providers: [String!]

  """Provider rank details."""
  rank: Float

  """Provider score details."""
  score: Float

  """Provider stake details."""
  stake: String

  """Provider stake percent details"""
  stakePercent: Float

  """Provider topUp amount details."""
  topUp: String

  """Provider twitter account."""
  twitter: String

  """Provider validators details."""
  validators: Float

  """Provider website details."""
  website: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""MexEconomics object type."""
type MexEconomics {
  """Circulating supply."""
  circulatingSupply: Float!

  """Mex market cap."""
  marketCap: Float!

  """Mex tokens pairs."""
  marketPairs: Float!

  """Mex current price."""
  price: Float!

  """Total supply details."""
  totalSupply: Float!

  """Mex volume in 24h."""
  volume24h: Float!
}

"""MexFarm object type."""
type MexFarm {
  """Address details."""
  address: String!

  """Farmed identifier details."""
  farmedId: String!

  """Farmed name details."""
  farmedName: String!

  """Farmed price details."""
  farmedPrice: Float!

  """Farmed symbol details."""
  farmedSymbol: String!

  """Farming identifier details."""
  farmingId: String!

  """Farming name details."""
  farmingName: String!

  """Farming price details."""
  farmingPrice: Float!

  """Farming symbol details."""
  farmingSymbol: String!

  """Identifier farm details."""
  id: String!

  """Name details."""
  name: String!

  """Price details."""
  price: Float!

  """Symbol details."""
  symbol: String!

  """Mex farm type."""
  type: MexFarmType!

  """Mex farm version."""
  version: String
}

"""MexFarmType object type."""
enum MexFarmType {
  """Metastaking type."""
  metastaking

  """Standard type."""
  standard
}

"""MexPair object type."""
type MexPair {
  """Address details."""
  address: String!

  """Base id details."""
  baseId: String!

  """Base name details."""
  baseName: String!

  """Mex token basePrevious24hPrice equivalent"""
  basePrevious24hPrice: Float!

  """Base price details."""
  basePrice: String!

  """Base symbol details."""
  baseSymbol: String!

  """Mex pair exchange details."""
  exchange: String

  """Id details."""
  id: String!

  """Pair name details."""
  name: String!

  """Mex token price equivalent"""
  price: String!

  """Quote id details."""
  quoteId: String!

  """Quote name details."""
  quoteName: String!

  """Mex token quotePrevious24hPrice equivalent"""
  quotePrevious24hPrice: Float!

  """Quote price details."""
  quotePrice: String!

  """Quote symbol details."""
  quoteSymbol: String!

  """State details."""
  state: MexPairState!

  """Pair symbol details."""
  symbol: String!

  """Total value details."""
  totalValue: String!

  """Mex pair type details."""
  type: MexPairType!

  """Total volume in 24h details."""
  volume24h: String
}

"""MexPairState object type."""
enum MexPairState {
  """Active state."""
  active

  """Inactive state."""
  inactive

  """Partial state."""
  partial

  """Pause state."""
  paused
}

"""MexPairType object type."""
enum MexPairType {
  """Community Type."""
  community

  """Core Type."""
  core

  """Ecosystem Type."""
  ecosystem

  """Experimental Type."""
  experimental

  """Unlisted Type."""
  unlisted
}

"""MexToken object type."""
type MexToken {
  """Identifier for the mex token."""
  id: String!

  """Mex token name."""
  name: String!

  """Mex token previous24hPrice."""
  previous24hPrice: Float!

  """Mex token current price."""
  price: Float!

  """Symbol for the mex token."""
  symbol: String!
}

"""MiniBlocks object type."""
type MiniBlocks {
  """MiniBlock Hash details."""
  miniBlockHash: String!

  """Receiver Block Hash details."""
  receiverBlockHash: String!

  """Receiver Shard details."""
  receiverShard: Float!

  """Sender Block Hash details."""
  senderBlockHash: String!

  """Sender shard details."""
  senderShard: Float!

  """Timestamp details."""
  timestamp: Float!

  """Transaction type details."""
  type: String!
}

"""NetworkConstants object type."""
type NetworkConstants {
  """ChainId details."""
  chainId: String!

  """GasPerDataByte details."""
  gasPerDataByte: Float!

  """MinGasLimit details."""
  minGasLimit: Float!

  """MinGasPrice details."""
  minGasPrice: Float!

  """MinTransactionVersion details."""
  minTransactionVersion: Float!
}

"""NFT object type."""
type Nft {
  """Assets for the given NFT."""
  assets: TokenAssets

  """Attributes for the given NFT."""
  attributes: String

  """Balance for the given NFT."""
  balance: String

  """NFT collection for the given NFT."""
  collection: NftCollection!

  """Creator account for the given NFT."""
  creator: Account!

  """Decimals for the given NFT."""
  decimals: Float

  """Identifier for the given NFT."""
  identifier: ID!

  """Is NSFW for the given NFT."""
  isNsfw: Boolean

  """Is whitelisted storage for the given NFT."""
  isWhitelistedStorage: Boolean!

  """NFT media for the given NFT."""
  media: [NftMedia!]

  """Metadata for the given NFT."""
  metadata: NftMetadata

  """Name for the given NFT."""
  name: String!

  """Nonce for the given NFT."""
  nonce: Float!

  """Owner account for the given NFT."""
  owner: Account

  """Rank for the given NFT."""
  rank: Float

  """Rarities according to all possible algorithms for the given NFT."""
  rarities: Float

  """Royalties for the given NFT."""
  royalties: Float

  """Scam information for the given NFT. Complexity: 100"""
  scamInfo: ScamInformation

  """Score for the given NFT."""
  score: Float

  """Supply for the given NFT. Complexity: 100"""
  supply: String

  """Tags for the given NFT."""
  tags: [String!]!

  """Thumbnail URL for the given NFT."""
  thumbnailUrl: String!

  """Ticker for the given NFT."""
  ticker: String!

  """Timestamp for the given NFT."""
  timestamp: Float

  """NFT type for the given NFT."""
  type: NftType!

  """Unlock epoch for the given NFT."""
  unlockEpoch: Float

  """Unlock mile stone model for the given NFT."""
  unlockSchedule: [UnlockMileStoneModel!]

  """URIs for the given NFT."""
  uris: [String!]!

  """URL for the given NFT."""
  url: String!
}

"""NFT account object type."""
type NftAccount {
  """Assets for the given NFT."""
  assets: TokenAssets

  """Attributes for the given NFT."""
  attributes: String

  """Balance for the given NFT account."""
  balance: String!

  """NFT collection for the given NFT."""
  collection: NftCollection!

  """Creator account for the given NFT."""
  creator: Account!

  """Decimals for the given NFT."""
  decimals: Float

  """Identifier for the given NFT."""
  identifier: ID!

  """Is NSFW for the given NFT."""
  isNsfw: Boolean

  """Is whitelisted storage for the given NFT."""
  isWhitelistedStorage: Boolean!

  """NFT media for the given NFT."""
  media: [NftMedia!]

  """Metadata for the given NFT."""
  metadata: NftMetadata

  """Name for the given NFT."""
  name: String!

  """Nonce for the given NFT."""
  nonce: Float!

  """Owner account for the given NFT."""
  owner: Account

  """Price for the given NFT account."""
  price: Float

  """Rank for the given NFT."""
  rank: Float

  """Rarities according to all possible algorithms for the given NFT."""
  rarities: Float

  """Royalties for the given NFT."""
  royalties: Float

  """Scam information for the given NFT. Complexity: 100"""
  scamInfo: ScamInformation

  """Score for the given NFT."""
  score: Float

  """Supply for the given NFT. Complexity: 100"""
  supply: String

  """Tags for the given NFT."""
  tags: [String!]!

  """Thumbnail URL for the given NFT."""
  thumbnailUrl: String!

  """Ticker for the given NFT."""
  ticker: String!

  """Timestamp for the given NFT."""
  timestamp: Float

  """NFT type for the given NFT."""
  type: NftType!

  """Unlock epoch for the given NFT."""
  unlockEpoch: Float

  """Unlock mile stone model for the given NFT."""
  unlockSchedule: [UnlockMileStoneModel!]

  """URIs for the given NFT."""
  uris: [String!]!

  """URL for the given NFT."""
  url: String!

  """Value in USD for the given NFT account."""
  valueUsd: Float
}

type NftAccountFlat {
  """Assets for the given NFT."""
  assets: TokenAssets

  """Attributes for the given NFT."""
  attributes: String

  """Balance for the given NFT."""
  balance: String

  """Decimals for the given NFT."""
  decimals: Float

  """Identifier for the given NFT."""
  identifier: ID!

  """Is NSFW for the given NFT."""
  isNsfw: Boolean

  """Is whitelisted storage for the given NFT."""
  isWhitelistedStorage: Boolean!

  """NFT media for the given NFT."""
  media: [NftMedia!]

  """Metadata for the given NFT."""
  metadata: NftMetadata

  """Name for the given NFT."""
  name: String!

  """Nonce for the given NFT."""
  nonce: Float!

  """Price for the given NFT account."""
  price: Float

  """Rank for the given NFT."""
  rank: Float

  """Rarities according to all possible algorithms for the given NFT."""
  rarities: Float

  """Royalties for the given NFT."""
  royalties: Float

  """Scam information for the given NFT. Complexity: 100"""
  scamInfo: ScamInformation

  """Score for the given NFT."""
  score: Float

  """Supply for the given NFT. Complexity: 100"""
  supply: String

  """Tags for the given NFT."""
  tags: [String!]!

  """Thumbnail URL for the given NFT."""
  thumbnailUrl: String!

  """Ticker for the given NFT."""
  ticker: String!

  """Timestamp for the given NFT."""
  timestamp: Float

  """NFT type for the given NFT."""
  type: NftType!

  """Unlock epoch for the given NFT."""
  unlockEpoch: Float

  """Unlock mile stone model for the given NFT."""
  unlockSchedule: [UnlockMileStoneModel!]

  """URIs for the given NFT."""
  uris: [String!]!

  """URL for the given NFT."""
  url: String!

  """Value in USD for the given NFT account."""
  valueUsd: Float
}

"""NFT collection object type."""
type NftCollection {
  """Assets for the given NFT collection."""
  assets: TokenAssets

  """Collection auction statistics."""
  auctionStats: CollectionAuctionStats

  """If the given NFT collection can add special role."""
  canAddSpecialRoles: Boolean

  """If the given NFT collection can change owner."""
  canChangeOwner: Boolean

  """If the given NFT collection can freeze."""
  canFreeze: Boolean

  """If the given NFT collection can pause."""
  canPause: Boolean

  """If the given NFT collection can transfer NFT create role."""
  canTransferNftCreateRole: Boolean

  """If the given NFT collection can upgrade."""
  canUpgrade: Boolean

  """If the given NFT collection can wipe."""
  canWipe: Boolean

  """Collection identifier for the given NFT collection."""
  collection: ID!

  """Decimals for the given NFT collection."""
  decimals: Float

  """
  Number of holders. Will be returned only if the collection is verified.
  """
  holderCount: Float

  """Returns true if the collection is verified."""
  isVerified: Boolean

  """Name for the given NFT collection."""
  name: String!

  """
  Number of NFTs for this collection. Will be returned only if the collection is verified.
  """
  nftCount: Float

  """Owner account for the given NFT collection."""
  owner: Account

  """Scam information for the underlying collection."""
  scamInfo: ScamInformation

  """Ticker for the given NFT collection."""
  ticker: ID!

  """Timestamp for the given NFT collection."""
  timestamp: Float!

  """Trait list for the given NFT collection."""
  traits: [CollectionTrait!]

  """NFT type for the given NFT collection."""
  type: NftType!
}

"""NFT collection account object type."""
type NftCollectionAccount {
  """Assets for the given NFT collection."""
  assets: TokenAssets

  """Collection auction statistics."""
  auctionStats: CollectionAuctionStats

  """If the given NFT collection can add special role."""
  canAddSpecialRoles: Boolean

  """If the given NFT collection can change owner."""
  canChangeOwner: Boolean

  """If the given NFT collection can freeze."""
  canFreeze: Boolean

  """If the given NFT collection can pause."""
  canPause: Boolean

  """If the given NFT collection can transfer NFT create role."""
  canTransferNftCreateRole: Boolean

  """If the given NFT collection can upgrade."""
  canUpgrade: Boolean

  """If the given NFT collection can wipe."""
  canWipe: Boolean

  """Collection identifier for the given NFT collection."""
  collection: ID!

  """Count for the given NFT collection account."""
  count: Float!

  """Decimals for the given NFT collection."""
  decimals: Float

  """
  Number of holders. Will be returned only if the collection is verified.
  """
  holderCount: Float

  """Returns true if the collection is verified."""
  isVerified: Boolean

  """Name for the given NFT collection."""
  name: String!

  """
  Number of NFTs for this collection. Will be returned only if the collection is verified.
  """
  nftCount: Float

  """Owner account for the given NFT collection."""
  owner: Account

  """Scam information for the underlying collection."""
  scamInfo: ScamInformation

  """Ticker for the given NFT collection."""
  ticker: ID!

  """Timestamp for the given NFT collection."""
  timestamp: Float!

  """Trait list for the given NFT collection."""
  traits: [CollectionTrait!]

  """NFT type for the given NFT collection."""
  type: NftType!
}

type NftCollectionAccountFlat {
  """Assets for the given NFT collection."""
  assets: TokenAssets

  """Collection auction statistics."""
  auctionStats: CollectionAuctionStats

  """If the given NFT collection can add special role."""
  canAddSpecialRoles: Boolean

  """If the given NFT collection can change owner."""
  canChangeOwner: Boolean

  """If the given NFT collection can freeze."""
  canFreeze: Boolean

  """If the given NFT collection can pause."""
  canPause: Boolean

  """If the given NFT collection can transfer NFT create role."""
  canTransferNftCreateRole: Boolean

  """If the given NFT collection can upgrade."""
  canUpgrade: Boolean

  """If the given NFT collection can wipe."""
  canWipe: Boolean

  """Collection identifier for the given NFT collection."""
  collection: ID!

  """Count for the given NFT collection account."""
  count: Float!

  """Decimals for the given NFT collection."""
  decimals: Float

  """
  Number of holders. Will be returned only if the collection is verified.
  """
  holderCount: Float

  """Returns true if the collection is verified."""
  isVerified: Boolean

  """Name for the given NFT collection."""
  name: String!

  """
  Number of NFTs for this collection. Will be returned only if the collection is verified.
  """
  nftCount: Float

  """Scam information for the underlying collection."""
  scamInfo: ScamInformation

  """Ticker for the given NFT collection."""
  ticker: ID!

  """Timestamp for the given NFT collection."""
  timestamp: Float!

  """Trait list for the given NFT collection."""
  traits: [CollectionTrait!]

  """NFT type for the given NFT collection."""
  type: NftType!
}

"""NFT media object type."""
type NftMedia {
  """File size for the given NFT media."""
  fileSize: Float!

  """File type for the given NFT media."""
  fileType: String!

  """Original URL for the given NFT media."""
  originalUrl: String!

  """Thumbnail URL for the given NFT media."""
  thumbnailUrl: String!

  """URL for the given NFT media."""
  url: String!
}

"""NFT metadata object type."""
type NftMetadata {
  """Description for the given NFT metadata."""
  description: String!

  """NFT Metadata fetch error."""
  error: NftMetadataError

  """File name for the given NFT metadata."""
  fileName: String!

  """File type for the given NFT metadata."""
  fileType: String!

  """File URI for the given NFT metadata."""
  fileUri: String!
}

"""NFT Metadata error."""
type NftMetadataError {
  """Error code"""
  code: NftMetadataErrorCode!

  """Error message"""
  message: String!

  """Timestamp when the error was generated"""
  timestamp: Float!
}

"""NFT Metadata error code"""
enum NftMetadataErrorCode {
  """Metadata is empty"""
  emptyMetadata

  """Invalid contentm type (should be application/json)"""
  invalidContentType

  """IPFS error"""
  ipfsError
  jsonParseError

  """IPFS link does not have any underlying resource"""
  notFound

  """IPFS request timeout"""
  timeout

  """Unknown error"""
  unknownError
}

"""NFT rank object type"""
type NftRank {
  """NFT identifier"""
  identifier: String!

  """NFT rank"""
  rank: Float!
}

"""NFT type."""
enum NftType {
  """Meta ESDT NFT type."""
  MetaESDT

  """Non-fungible NFT type."""
  NonFungibleESDT

  """Semi-fungible NFT type."""
  SemiFungibleESDT
}

"""Node object type."""
type Node {
  """Auction position for the given node."""
  auctionPosition: Float

  """Auction selected for the given node."""
  auctionQualified: Boolean

  """Auction top up for the given node."""
  auctionTopUp: String

  """Auctioned detailes for the given node."""
  auctioned: Boolean

  """Bls address for the given node."""
  bls: String!

  """Number of epochs left for a node in waiting state."""
  epochsLeft: Float

  """Full history details for the given node."""
  fullHistory: Boolean

  """Identity for the given node."""
  identity: String

  """Instances for the given node."""
  instances: Float!

  """Nodes in auction danger zone."""
  isInDangerZone: Boolean

  """Issues for the given node."""
  issues: [String!]!

  """Leader failure for the given node."""
  leaderFailure: Float!

  """Leader success for the given node."""
  leaderSuccess: Float!

  """Locked details for the given node."""
  locked: String!

  """Name for the given node."""
  name: String!

  """Nonce for the given node."""
  nonce: Float!

  """Online for the given node."""
  online: Boolean!

  """Owner for the given node."""
  owner: String!

  """Bls address for the given node."""
  position: Float!

  """Provider for the given node."""
  provider: String!

  """Rating for the given node."""
  rating: Float!

  """Rating modifier for the given node."""
  ratingModifier: Float!

  """Remaining UnBond Period for node with status leaving."""
  remainingUnBondPeriod: Float

  """Shard for the given node."""
  shard: Float

  """Stake for the given node."""
  stake: String!

  """Status for the given node."""
  status: NodeStatus

  """
  Sync progress in case the node is currently in sync mode. If specified, the value can be between 0 and 1.
  """
  syncProgress: Float

  """Temp rating for the given node."""
  tempRating: Float!

  """Top up for the given node."""
  topUp: String!

  """Type for the given node."""
  type: NodeType

  """Validator failure for the given node."""
  validatorFailure: Float!

  """Validator ignored signatures details for the given node."""
  validatorIgnoredSignatures: Float!

  """Bls address for the given node."""
  validatorSuccess: Float!

  """Version for the given node."""
  version: String!
}

"""Node Sort object."""
enum NodeSort {
  """Node auction position."""
  auctionPosition

  """Node leader failure."""
  leaderFailure

  """Node learder success."""
  leaderSuccess

  """Node locked."""
  locked

  """Node name."""
  name

  """Node position."""
  position

  """Node temp rating."""
  tempRating

  """Node validator failure."""
  validatorFailure

  """Node validator ignored signatures."""
  validatorIgnoredSignatures

  """Node validator success."""
  validatorSuccess

  """Node version."""
  version
}

"""Node status object type."""
enum NodeStatus {
  auction

  """Eligible status."""
  eligible

  """Inactive status."""
  inactive

  """Jailed status."""
  jailed

  """Leaving status."""
  leaving

  """New status."""
  new

  """Queued status."""
  queued

  """Unknown status."""
  unknown

  """Waiting status."""
  waiting
}

"""Node Type object."""
enum NodeType {
  """Observer type."""
  observer

  """Validator type."""
  validator
}

"""Provider object type."""
type Provider {
  """APR details percentage."""
  apr: Float!

  """Provider cumulated rewards."""
  cumulatedRewards: String

  """Delegation cap details."""
  delegationCap: String!

  """Featured details."""
  featured: Boolean!

  """Provider identity."""
  identity: String

  """Locked amound details."""
  locked: String!

  """Total numbers of nodes."""
  numNodes: Float!

  """Total number of users."""
  numUsers: Float!

  """Owner address details."""
  owner: String

  """Provider address details."""
  provider: String!

  """Service fee details."""
  serviceFee: Float!

  """Total stake amount."""
  stake: Float!

  """Top up details."""
  topUp: String!
}

"""Provider stake object type."""
type ProviderStake {
  """Total stake for the given account."""
  totalStaked: String!

  """Unstaked tokens details for the given account."""
  unstakedTokens: [ProviderUnstakedTokens!]
}

"""Provider unstaked tokens object type."""
type ProviderUnstakedTokens {
  """Amount for the given token."""
  amount: String!

  """Epoch number for the given token."""
  epochs: String

  """Expires details for the given token."""
  expires: String
}

type Query {
  """Retrieve general information about API deployment."""
  about: About!

  """Retrieve the detailed account for the given input."""
  account(
    """Input to retrieve the given detailed account for."""
    input: GetAccountDetailedInput!
  ): AccountDetailed

  """Retrieve all accounts for the given input."""
  accounts(
    """Input to retrieve the given accounts for."""
    input: GetAccountsInput!
  ): [Account!]!

  """Retrieve all accounts count."""
  accountsCount(
    """Input to retrieve the given accounts for."""
    input: GetAccountFilteredInput!
  ): Float!

  """Retrieve the block for the given input."""
  blockHash(
    """Input to retrieve the given block hash details for."""
    input: GetBlockHashInput!
  ): BlockDetailed!

  """Retrieve all blocks for the given input."""
  blocks(
    """Input to retrieve the given blocks for."""
    input: GetBlocksInput!
  ): [Block!]!

  """Retrieve the all blocks count for the given input."""
  blocksCount(
    """Input to retrieve the given blocks count for."""
    input: GetBlocksCountInput!
  ): Float

  """Retrieve the NFT collection for the given input."""
  collection(
    """Input to retrieve the given NFT collection for."""
    input: GetNftCollectionInput!
  ): NftCollection

  """Retrieve the NFT collection ranks for the given input."""
  collectionRank(
    """Input to retrieve the given NFT collection ranks for."""
    input: GetNftCollectionInput!
  ): [NftRank!]

  """Retrieve all NFT collections for the given input."""
  collections(
    """Input to retrieve the given NFT collections for."""
    input: GetNftCollectionsInput!
  ): [NftCollection!]!

  """Retrieve all NFT collections count for the given input."""
  collectionsCount(
    """Input to retrieve the given NFT collections count for."""
    input: GetNftCollectionsCountInput!
  ): Float!

  """
  Retrieve network-specific constants that can be used to automatically configure dapps.
  """
  constants: NetworkConstants!

  """Retrieve configuration used in dapp."""
  dappConfig: DappConfig!

  """Retrieve all delegation staking information."""
  delegation: Delegation!

  """Retrieve legacy delegation contract global information."""
  delegationLegacy: DelegationLegacy!

  """Retrieve general economics information."""
  economics: Economics!

  """
  Retrieve list of all node identities, used to group nodes by the same entity. "Free-floating" nodes that do not belong to any identity will also be returned
  """
  identities: [Identity!]

  """
  Retrieve list of all node identities, used to group nodes by the same entity. "Free-floating" nodes that do not belong to any identity will also be returned
  """
  identity(
    """."""
    input: GetIndentityInput!
  ): [Identity!]!

  """Retrieve economics details of xExchange."""
  mexEconomics: MexEconomics!

  """Retrieve a list of farms listed on xExchange."""
  mexFarms(
    """Input to retrieve the given farms for."""
    input: GetMexFarmsInput!
  ): [MexFarm!]!

  """Retrieve one mex pair listed on xExchange for the given input."""
  mexPair(
    """Input to retrieve the given tokens mex pair for."""
    input: GetMexTokenPairsByQuotePairIdInput!
  ): MexPair!

  """Retrieve all mex token pairs listed on xExchange for the given input."""
  mexPairs(
    """Input to retrieve the given tokens for."""
    input: GetMexTokenPairsInput!
  ): [MexPair!]!

  """Retrieve the mex token for the given input."""
  mexToken(
    """Input to retrieve the given NFT for."""
    input: GetMexTokenInput!
  ): MexToken

  """Retrieve all tokens listed on xExchange for the given input."""
  mexTokens(
    """Input to retrieve the given tokens for."""
    input: GetMexTokensInput!
  ): [MexToken!]!

  """Retrieve the mini block hash for the given input."""
  miniBlockHash(
    """Input to retrieve the given mini block hash details for."""
    input: GetMiniBlockHashInput!
  ): MiniBlocks!

  """Retrieve the NFT for the given input."""
  nft(
    """Input to retrieve the given NFT for."""
    input: GetNftInput!
  ): Nft

  """Retrieve all NFTs for the given input."""
  nfts(
    """Input to retrieve the given NFTs for."""
    input: GetNftsInput!
  ): [Nft!]!

  """Retrieve all NFTs count for the given input."""
  nftsCount(
    """Input to retrieve the given NFTs count for."""
    input: GetNftsCountInput!
  ): Float!

  """Retrieve the node details for the given input."""
  node(
    """Input to retrieve the given node for."""
    input: GetNodeBlsInput!
  ): Node

  """Retrieve all nodes for the given input."""
  nodes(
    """Input to retrieve the given nodes for."""
    input: GetNodesInput!
  ): [Node!]!

  """
  Returns number of all observer/validator nodes available on blockchain.
  """
  nodesCount(
    """Input to retrieve the given nodes count for."""
    input: GetNodesCountInput!
  ): Float

  """Retrieve the nodes version."""
  nodesVersion: JSON!

  """Retrieve a specific provider for the given input."""
  provider(
    """Input to retrieve the given identity provider for."""
    input: GetProviderByAddressInput!
  ): Provider!

  """Retrieve all providers for the given input."""
  providers(
    """Input to retrieve the given identity provider for."""
    input: GetProviderInput!
  ): [Provider!]!

  """Retrieve the smart contract details for the given input."""
  result(
    """Input to retrieve the given smart contract for."""
    input: GetSmartContractHashInput!
  ): SmartContractResult

  """Retrieve all smart contract results for the given input."""
  results(
    """Input to retrieve the given smart contract results for."""
    input: GetSmartContractResultInput!
  ): [SmartContractResult!]!

  """Returns total number of smart contracts."""
  resultsCount: Float!

  """Retrieve the round details for the given input."""
  round(
    """Input to retrieve the given node for."""
    input: GetRoundInput!
  ): RoundDetailed

  """Retrieve all rounds for the given input."""
  rounds(
    """Input to retrieve the given rounds for."""
    input: GetRoundsInput!
  ): [Round!]!

  """Returns total number of rounds."""
  roundsCount(
    """Input to retrieve the given rounds count for."""
    input: GetRoundsCountInput!
  ): Float

  """Retrieve all shards for the given input."""
  shards(
    """Input to retrieve the given shards for."""
    input: GetShardInput!
  ): [Shard!]!

  """Retrieve general stake informations."""
  stake: GlobalStake!

  """Retrieve general network statistics."""
  stats: Stats!

  """Retrieve all tags for the given input."""
  tags(
    """Input to retrieve the given tags for."""
    input: GetTagsInput!
  ): [Tag!]!

  """Retrieve all tags count."""
  tagsCount: Float!

  """Retrieve token for the given input."""
  token(
    """Input to retrieve the given token for."""
    input: GetTokenInput!
  ): TokenDetailed

  """Retrieve token accounts for the given input."""
  tokenAccounts(
    """Input to retrieve the given token for."""
    input: GetTokenAccountsInput!
  ): [TokenAccount!]

  """Retrieve all token accounts count for the given input."""
  tokenAccountsCount(
    """Input to retrieve the given count for."""
    input: GetTokenInput!
  ): Float!

  """Retrieve token roles for the given input."""
  tokenRoles(
    """Input to retrieve the given token for."""
    input: GetTokenInput!
  ): [TokenRoles!]

  """Retrieve token roles for the given input."""
  tokenRolesAddress(
    """Input to retrieve the given token for."""
    input: GetTokenRolesForIdentifierAndAddressInput!
  ): TokenRoles

  """Retrieve token supply for the given input."""
  tokenSupply(
    """Input to retrieve the given token for."""
    input: GetTokenInput!
  ): TokenSupplyResult

  """Retrieve all tokens for the given input."""
  tokens(
    """Input to retrieve the given tokens for."""
    input: GetTokensInput!
  ): [TokenDetailed!]!

  """Retrieve all tokens count for the given input."""
  tokensCount(
    """Input to retrieve the given count for."""
    input: GetTokensCountInput!
  ): Float!

  """Retrieve the detailed transaction for the given input."""
  transaction(
    """Input to retrieve the given detailed transaction for."""
    input: GetTransactionDetailedInput!
  ): TransactionDetailed

  """Retrieve all transactions available for the given input."""
  transactions(
    """Input to retrieve the given transactions for."""
    input: GetTransactionsInput!
  ): [TransactionDetailed!]!

  """Retrieve all transactions count for the given input."""
  transactionsCount(
    """Input to retrieve the given transactions count for."""
    input: GetTransactionsCountInput!
  ): Float!

  """Retrieve all transfers for the given input."""
  transfers(
    """Input to retreive the given transfers for."""
    input: GetTransfersInput!
  ): [Transaction!]!

  """Retrieve all transfers count for the given input."""
  transfersCount(
    """Input to retrieve the given transfers count for."""
    input: GetTransfersCountInput!
  ): Float!

  """Retrieve account detailed for a given username"""
  username(
    """Input to retrieve the given detailed account for."""
    input: GetUsernameInput!
  ): Username!

  """Retrieve all address that are in waiting."""
  waitingList(
    """Input to retrieve the given waiting accounts for."""
    input: GetWaitingListInput!
  ): [WaitingList!]!

  """Retrieve all addresses count that are in waiting."""
  waitingListCount: Float!

  """Retrieve config used for accessing websocket on the same cluster."""
  webSocketConfig: WebsocketConfig!
}

"""Round object type."""
type Round {
  """Block proposer for the given round."""
  blockWasProposed: Boolean!

  """Epoch for the given round."""
  epoch: Float!

  """Round number details."""
  round: Float!

  """Shard ID for the given round."""
  shard: Float!

  """Timestamp for the given round."""
  timestamp: Float!
}

"""RoundDetailed object type."""
type RoundDetailed {
  """Block proposer for the given round."""
  blockWasProposed: Boolean!

  """Epoch for the given round."""
  epoch: Float!

  """Round number details."""
  round: Float!

  """Shard ID for the given round."""
  shard: Float!
  signers: [String!]!

  """Timestamp for the given round."""
  timestamp: Float!
}

"""Scam information object type."""
type ScamInformation {
  """Information for the given scam."""
  info: String

  """Type for the given scam information."""
  type: ScamType!
}

"""Scam type object type."""
enum ScamType {
  """No scam type."""
  none

  """Potential scam type."""
  potentialScam

  """Scam type."""
  scam
}

"""Shard object type."""
type Shard {
  """Total number of active validators."""
  activeValidators: Float!

  """Shard details."""
  shard: Float!

  """Total number of validators."""
  validators: Float!
}

"""Smart contract result object type."""
type SmartContractResult {
  """Transaction action for the given smart contract result."""
  action: TransactionAction

  """Call type for the given smart contract result."""
  callType: String!

  """Data for the given smart contract result."""
  data: String!

  """Function call"""
  function: String

  """Gas limit for the given smart contract result."""
  gasLimit: Float!

  """Gas price for the given smart contract result."""
  gasPrice: Float!

  """Hash for the given smart contract result."""
  hash: ID

  """Transaction logs for the given smart contract result."""
  logs: TransactionLog

  """Mini block hash for the given smart contract result."""
  miniBlockHash: String

  """Nonce for the given smart contract result."""
  nonce: Float!

  """Original transaction hash for the given smart contract result."""
  originalTxHash: String!

  """Previous transaction hash for the given smart contract result."""
  prevTxHash: String!

  """Receiver address for the given smart contract result."""
  receiver: String!

  """Receiver assets for the given smart contract result."""
  receiverAssets: AccountAssets

  """Relayed value for the given smart contract result."""
  relayedValue: String!

  """Return message for the given smart contract result."""
  returnMessage: String

  """Sender address for the given smart contract result."""
  sender: String!

  """Sender assets for the given smart contract result."""
  senderAssets: AccountAssets

  """Timestamp for the given smart contract result."""
  timestamp: Float!

  """Value for the given smart contract result."""
  value: String!
}

"""Sort order object type."""
enum SortOrder {
  """Ascending order."""
  asc

  """Descending order."""
  desc
}

"""Stats object type."""
type Stats {
  """Total number of accounts available on blockchain."""
  accounts: Float!

  """Total blocks available on blockchain."""
  blocks: Float!

  """Current epoch details."""
  epoch: Float!

  """RefreshRate details."""
  refreshRate: Float!

  """RoundPassed details."""
  roundsPassed: Float!

  """Rounds per epoch details."""
  roundsPerEpoch: Float!

  """Total number of smart contract results."""
  scResults: Float!

  """Shards available on blockchain."""
  shards: Float!

  """Total number of transactions."""
  transactions: Float!
}

"""Tag object type."""
type Tag {
  """Count for the given tag."""
  count: Float

  """Tag details."""
  tag: String!
}

"""TokenAccount object type."""
type TokenAccount {
  """Token account address."""
  address: String!

  """Account assets for the given account."""
  assets: AccountAssets

  """Token attributes if MetaESDT."""
  attributes: String

  """Token balance account amount."""
  balance: String!

  """Token identifier if MetaESDT."""
  identifier: String
}

"""Token assets object type."""
type TokenAssets {
  """Description for the given token assets."""
  description: String!

  """Extra tokens for the given token assets."""
  extraTokens: [String!]

  """Ledger signature for the given token assets."""
  ledgerSignature: String

  """Locked accounts for the given token assets."""
  lockedAccounts: JSON

  """Name for the given token assets."""
  name: String!

  """PNG URL for the given token assets."""
  pngUrl: String!

  """
  Preferred ranking algorithm for NFT collections. Supported values are "trait", "statistical", "jaccardDistances", "openRarity" and "custom".
  """
  preferredRankAlgorithm: String

  """Custom price source for the given token"""
  priceSource: TokenAssetsPriceSource

  """Status for the given token assets."""
  status: String!

  """SVG URL for the given token assets."""
  svgUrl: String!

  """Website for the given token assets."""
  website: String!
}

"""Token assets price source object type."""
type TokenAssetsPriceSource {
  """Type of price source"""
  type: String
}

"""TokenDetailed object type."""
type TokenDetailed {
  """Token accounts list."""
  accounts: Float!

  """Token assests details."""
  assets: TokenAssets

  """Token burn amount details."""
  burnt: String!

  """Token canAddSpecialRoles property in case of type MetaESDT."""
  canAddSpecialRoles: Boolean

  """Token canBurn property."""
  canBurn: Boolean

  """Token canChangeOwner property."""
  canChangeOwner: Boolean

  """Token canFreeze property."""
  canFreeze: Boolean

  """Token canMint property."""
  canMint: Boolean

  """Token canPause property."""
  canPause: Boolean!

  """
  If the given NFT collection can transfer the underlying tokens by default.
  """
  canTransfer: Boolean

  """Token canFreeze property."""
  canTransferNftCreateRole: Boolean

  """Token canUpgrade property."""
  canUpgrade: Boolean!

  """Token canWipe property."""
  canWipe: Boolean

  """Token circulating supply amount details."""
  circulatingSupply: String

  """Token Collection if type is MetaESDT."""
  collection: String

  """Token decimals."""
  decimals: Float!

  """Token Identifier."""
  identifier: String!

  """Token initial minted amount details."""
  initialMinted: String!

  """
  If the liquidity to market cap ratio is less than 1%, we consider it as low liquidity.
  """
  isLowLiquidity: Boolean

  """Token isPause property."""
  isPaused: Boolean!

  """Current market cap details."""
  marketCap: Float

  """Mex pair type details."""
  mexPairType: MexPairType!

  """Token minted amount details."""
  minted: String!

  """Token name."""
  name: String!

  """Token Nonce if type is MetaESDT."""
  nonce: Float

  """Token owner address."""
  owner: String!

  """Current token price."""
  price: Float

  """Token roles details."""
  roles: [TokenRoles!]

  """Token supply amount details."""
  supply: String

  """Token ticker."""
  ticker: String!

  """Creation timestamp."""
  timestamp: Float!

  """Total value captured in liquidity pools."""
  totalLiquidity: Float!

  """Total traded value in the last 24h within the liquidity pools."""
  totalVolume24h: Float!

  """Tokens transactions."""
  transactions: Float

  """Tokens transfers."""
  transfers: Float

  """Token type."""
  type: TokenType!
}

"""TokenRoles object type."""
type TokenRoles {
  """Token address with role."""
  address: String

  """Token canAddQuantity property."""
  canAddQuantity: Boolean

  """Token canAddUri property."""
  canAddUri: Boolean

  """Token canBurn property."""
  canBurn: Boolean

  """Token canCreate property."""
  canCreate: Boolean

  """Token canLocalBurn property."""
  canLocalBurn: Boolean

  """Token canLocalMint property."""
  canLocalMint: Boolean

  """Token canTransfer property."""
  canTransfer: Boolean

  """Token canUpdateAttributes property."""
  canUpdateAttributes: Boolean

  """Token roles details."""
  roles: [String!]!
}

"""Token Sort object type."""
enum TokenSort {
  """Accounts sort."""
  accounts

  """MarketCap sort."""
  marketCap

  """Price sort."""
  price

  """Transactions sort."""
  transactions
}

"""TokenSupplyResult object type."""
type TokenSupplyResult {
  """Token burnt."""
  burnt: String!

  """Token circulating supply."""
  circulatingSupply: String!

  """Token initial minted."""
  initialMinted: String!

  """Token locked accounts."""
  lockedAccounts: [EsdtLockedAccount!]!

  """Token minted details."""
  minted: String!

  """Token supply."""
  supply: String!
}

"""Token Type object."""
enum TokenType {
  """FungibleESDT."""
  FungibleESDT

  """MetaESDT."""
  MetaESDT

  """NonFungibleESDT."""
  NonFungibleESDT

  """SemiFungibleESDT."""
  SemiFungibleESDT
}

type TokenWithBalanceAccountFlat {
  """Token accounts list."""
  accounts: Float!

  """Token assests details."""
  assets: TokenAssets

  """Balance for the given token account."""
  balance: String!

  """Token burnt details."""
  burnt: String!

  """Token canAddSpecialRoles property in case of type MetaESDT."""
  canAddSpecialRoles: Boolean

  """Token canBurn property."""
  canBurn: Boolean

  """Token canChangeOwner property."""
  canChangeOwner: Boolean

  """Token canFreeze property."""
  canFreeze: Boolean

  """Token canMint property."""
  canMint: Boolean

  """Token canPause property."""
  canPause: Boolean!

  """Token canFreeze property."""
  canTransferNftCreateRole: Boolean

  """Token canUpgrade property."""
  canUpgrade: Boolean!

  """Token canWipe property."""
  canWipe: Boolean

  """Token circulating supply amount details."""
  circulatingSupply: String

  """Token Collection if type is MetaESDT."""
  collection: String

  """Token decimals."""
  decimals: Float!

  """Token Identifier."""
  identifier: String!

  """Token initial minting details."""
  initialMinted: String!

  """
  If the liquidity to market cap ratio is less than 1%, we consider it as low liquidity.
  """
  isLowLiquidity: Boolean

  """Token isPause property."""
  isPaused: Boolean!

  """Current market cap details."""
  marketCap: Float

  """Mex pair type details."""
  mexPairType: MexPairType!

  """Token minted details."""
  minted: String!

  """Token name."""
  name: String!

  """Token Nonce if type is MetaESDT."""
  nonce: Float

  """Current token price."""
  price: Float

  """Token supply amount details."""
  supply: String

  """Token ticker."""
  ticker: String!

  """Creation timestamp."""
  timestamp: Float!

  """Total value captured in liquidity pools."""
  totalLiquidity: Float!

  """Total traded value in the last 24h within the liquidity pools."""
  totalVolume24h: Float!

  """Tokens transactions."""
  transactions: Float

  """Tokens transfers."""
  transfers: Float

  """Token type."""
  type: TokenType!

  """ValueUsd token for the given token account."""
  valueUsd: Float
}

"""Transaction object type."""
type Transaction {
  """Transaction action for the given transaction."""
  action: TransactionAction

  """Data for the given transaction."""
  data: String

  """Fee for the given transaction."""
  fee: String

  """Function for the given transaction."""
  function: String

  """Gas limit for the given transaction."""
  gasLimit: Float

  """Gas price for the given transaction."""
  gasPrice: Float

  """Gas used for the given transaction."""
  gasUsed: Float

  """Guardian address for the given transaction."""
  guardianAddress: String

  """Guardian signature for the given transaction."""
  guardianSignature: String

  """Is relayed transaction."""
  isRelayed: Boolean

  """Mini block hash for the given transaction."""
  miniBlockHash: String

  """Nonce for the given transaction."""
  nonce: Float

  """Original tx hash for the given transaction."""
  originalTxHash: String

  """Pending results for the given transaction."""
  pendingResults: Boolean

  """Receiver account for the given transaction."""
  receiverAccount: Account!

  """Receiver account for the given transaction."""
  receiverAddress: String!

  """Receiver assets for the given transaction."""
  receiverAssets: AccountAssets

  """Receiver account shard for the given transaction."""
  receiverShard: String!

  """The username of the receiver for the given transaction."""
  receiverUsername: String!

  """Round for the given transaction."""
  round: Float

  """Scam information for the given transaction."""
  scamInfo: ScamInformation

  """Sender account for the given transaction."""
  senderAccount: Account!

  """Sender account for the given transaction."""
  senderAddress: String!

  """Sender assets for the given transaction."""
  senderAssets: AccountAssets

  """Sender account shard for the given transaction."""
  senderShard: Float!

  """The username of the sender for the given transaction."""
  senderUsername: String!

  """Signature for the given transaction."""
  signature: String

  """Status for the given transaction."""
  status: String!

  """Timestamp for the given transaction."""
  timestamp: Float!

  """Hash for the given transaction."""
  txHash: ID!

  """Transaction type."""
  type: TransactionType

  """Value for the given transaction."""
  value: String!
}

"""Transaction action object type."""
type TransactionAction {
  """Description for the given transaction action."""
  arguments: JSON

  """Category for the given transaction action."""
  category: String!

  """Description for the given transaction action."""
  description: String!

  """Name for the given transaction action."""
  name: String!
}

"""Detailed Transaction object type that extends Transaction."""
type TransactionDetailed {
  """Transaction action for the given transaction."""
  action: TransactionAction

  """Data for the given transaction."""
  data: String

  """Fee for the given transaction."""
  fee: String

  """Function for the given transaction."""
  function: String

  """Gas limit for the given transaction."""
  gasLimit: Float

  """Gas price for the given transaction."""
  gasPrice: Float

  """Gas used for the given transaction."""
  gasUsed: Float

  """Guardian address for the given transaction."""
  guardianAddress: String

  """Guardian signature for the given transaction."""
  guardianSignature: String

  """InTransit transaction details."""
  inTransit: Boolean

  """Is relayed transaction."""
  isRelayed: Boolean

  """Transaction log for the given detailed transaction."""
  logs: TransactionLog

  """Mini block hash for the given transaction."""
  miniBlockHash: String

  """Nonce for the given transaction."""
  nonce: Float

  """Transaction operations for the given detailed transaction."""
  operations: [TransactionOperation!]

  """Original tx hash for the given transaction."""
  originalTxHash: String

  """Pending results for the given transaction."""
  pendingResults: Boolean

  """Price for the given detailed transaction."""
  price: Float

  """Transaction receipt for the given detailed transaction."""
  receipt: TransactionReceipt

  """Receiver account for the given detailed transaction."""
  receiverAccount: Account!

  """Receiver account for the given transaction."""
  receiverAddress: String!

  """Receiver assets for the given transaction."""
  receiverAssets: AccountAssets

  """Receiver Block hash for the given transaction."""
  receiverBlockHash: String

  """Receiver Block nonce for the given transaction."""
  receiverBlockNonce: Float

  """Receiver account shard for the given transaction."""
  receiverShard: String!

  """The username of the receiver for the given transaction."""
  receiverUsername: String!

  """Relayed transaction version."""
  relayedVersion: String

  """Smart contract results for the given detailed transaction."""
  results: [SmartContractResult!]

  """Round for the given transaction."""
  round: Float

  """Scam information for the given transaction."""
  scamInfo: ScamInformation

  """Sender account for the given detailed transaction."""
  senderAccount: Account!

  """Sender account for the given transaction."""
  senderAddress: String!

  """Sender assets for the given transaction."""
  senderAssets: AccountAssets

  """Sender Block hash for the given transaction."""
  senderBlockHash: String

  """Sender Block nonce for the given transaction."""
  senderBlockNonce: Float

  """Sender account shard for the given transaction."""
  senderShard: Float!

  """The username of the sender for the given transaction."""
  senderUsername: String!

  """Signature for the given transaction."""
  signature: String

  """Status for the given transaction."""
  status: String!

  """Timestamp for the given transaction."""
  timestamp: Float!

  """Hash for the given transaction."""
  txHash: ID!

  """Transaction type."""
  type: TransactionType

  """Value for the given transaction."""
  value: String!
}

"""Transaction log object type."""
type TransactionLog {
  """Address for the given transaction log."""
  address: String!

  """Account assets for the given transaction log."""
  addressAssets: AccountAssets

  """Transaction log events list for the given transaction log."""
  events: [TransactionLogEvent!]!

  """Identifier for the given transaction log."""
  id: ID!
}

"""Transaction log event object type."""
type TransactionLogEvent {
  """Address for the given transaction log event."""
  address: String!

  """Address assets for the given transaction log event."""
  addressAssets: AccountAssets!

  """Data for the given transaction log event."""
  data: String

  """Identifier for the given transaction log event."""
  identifier: ID!

  """Topics list for the given transaction log event."""
  topics: [String!]!
}

"""Transaction operation object type."""
type TransactionOperation {
  """Transaction operation action for the transaction operation."""
  action: TransactionOperationAction!

  """Collection for the transaction operation."""
  collection: String

  """Data for the transaction operation."""
  data: String

  """Decimals for the transaction operation."""
  decimals: Float

  """ESDT type for the transaction operation."""
  esdtType: EsdtType

  """Identifier for the transaction operation."""
  id: ID!

  """Identifier for the transaction operation."""
  identifier: String!

  """Message for the transaction operation."""
  message: String

  """Name for the transaction operation."""
  name: String

  """Receiver address for the transaction operation."""
  receiver: String!

  """Receiver account assets for the transaction operation."""
  receiverAssets: AccountAssets

  """Sender address for the transaction operation."""
  sender: String!

  """Sender account assets for the transaction operation."""
  senderAssets: AccountAssets

  """SVG URL for the transaction operation."""
  svgUrl: String

  """Token ticker for the transaction operation."""
  ticker: String!

  """Transaction operation type for the transaction operation."""
  type: TransactionOperationType!

  """Value for the transaction operation."""
  value: String

  """Value for the transaction operation in USD."""
  valueUSD: Float
}

"""Transaction operation action object type."""
enum TransactionOperationAction {
  """Add quantity operation action."""
  addQuantity

  """Burn operation action."""
  burn

  """Create operation action."""
  create

  """Freeze operation action."""
  freeze

  """Local burn operation action."""
  localBurn

  """Local mint operation action."""
  localMint

  """No operation operation action."""
  none

  """Signal error operation action."""
  signalError

  """Transafer operation action."""
  transfer

  """Transfer only value operation action."""
  transferValueOnly

  """Wipe operation action."""
  wipe

  """Write log operation action."""
  writeLog
}

"""Transaction operation type object type."""
enum TransactionOperationType {
  """EGLD operation type."""
  egld

  """Error operation type."""
  error

  """ESDT operation type."""
  esdt

  """Log operation type."""
  log

  """NFT operation type."""
  nft

  """No operation type."""
  none
}

"""Transaction receipt object type."""
type TransactionReceipt {
  """Data for the given transaction receipt."""
  data: String!

  """Sender address for the given transaction receipt."""
  sender: String!

  """Value for the given transaction receipt."""
  value: String!
}

"""Transaction status object type."""
enum TransactionStatus {
  """Fail status."""
  fail

  """Invalid status."""
  invalid

  """Pending status."""
  pending

  """Success status."""
  success
}

"""Transaction type object type."""
enum TransactionType {
  """Reward type."""
  Reward

  """SmartContractResult type."""
  SmartContractResult

  """Transaction type."""
  Transaction
}

"""Unlock mile stone model object type."""
type UnlockMileStoneModel {
  """Percent for the given unlock mile stone model."""
  percent: Float!

  """Remaining epochs for the given unlock mile stone model."""
  remainingEpochs: Float!
}

"""Username object type."""
type Username {
  """Address details."""
  address: String!

  """Balance details."""
  balance: String!

  """Developer Reward details."""
  developerReward: String!

  """Nonce details."""
  nonce: String

  """RootHash details."""
  rootHash: String!

  """ScrCount details."""
  scrCount: String

  """Shard details."""
  shard: String

  """txCount details."""
  txCount: Float

  """Username details."""
  username: String!
}

"""Waiting object type."""
type WaitingList {
  """Address details."""
  address: ID!

  """Nonce details."""
  nonce: Float!

  """Rank details."""
  rank: Float!

  """Value details."""
  value: Float!
}

"""WebsocketConfig object type."""
type WebsocketConfig {
  """Cluster url."""
  url: String!
}