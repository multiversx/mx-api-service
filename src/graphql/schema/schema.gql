# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Account object type."""
type Account {
  """Address for the given account."""
  address: ID!

  """Account assets for the given account."""
  assets: AccountAssets

  """Balance for the given account."""
  balance: String!

  """Nonce for the given account."""
  nonce: Float!

  """Shard for the given account."""
  shard: Float!
}

"""Account assets object type."""
type AccountAssets {
  """Description for the given account asset."""
  description: String!

  """Icon for the given account asset."""
  icon: String

  """Icon PNG for the given account asset."""
  iconPng: String

  """Icon SVG for the given account asset."""
  iconSvg: String

  """Name for the given account asset."""
  name: String!

  """Proof for the given account asset."""
  proof: String

  """Tags list for the given account asset."""
  tags: [String!]!
}

"""Detailed Account object type that extends Account."""
type AccountDetailed {
  """Address for the given account."""
  address: ID!

  """Account assets for the given account."""
  assets: AccountAssets

  """Balance for the given account."""
  balance: String!

  """Code for the given detailed account."""
  code: String!

  """Code hash for the given detailed account."""
  codeHash: String

  """Deployment timestamp for the given detailed account."""
  deployedAt: Float

  """Developer reward for the given detailed account."""
  developerReward: String!

  """If the given detailed account is payable."""
  isPayable: Boolean

  """If the given detailed account is payable by smart contract."""
  isPayableBySmartContract: Boolean

  """If the given detailed account is readable."""
  isReadable: Boolean

  """If the given detailed account is upgradeable."""
  isUpgradeable: Boolean

  """Nonce for the given account."""
  nonce: Float!

  """Owner address for the given detailed account."""
  ownerAddress: String!

  """Root hash for the given detailed account."""
  rootHash: String

  """Scam information for the given detailed account."""
  scamInfo: ScamInformation

  """Smart contracts count for the given detailed account."""
  scrCount: Float!

  """Shard for the given account."""
  shard: Float!

  """Transactions count for the given detailed account."""
  txCount: Float!

  """Username for the given detailed account."""
  username: String!
}

"""Collection roles object type."""
type CollectionRoles {
  """Address for the given collection roles."""
  address: String

  """If the given collection role can add quantity."""
  canAddQuantity: Boolean!

  """If the given collection role can add URI."""
  canAddUri: Boolean!

  """If the given collection role can burn."""
  canBurn: Boolean!

  """If the given collection role can create."""
  canCreate: Boolean!

  """If the given collection role can transfer role."""
  canTransferRole: Boolean!

  """If the given collection role can update attributes."""
  canUpdateAttributes: Boolean!

  """Roles list for the given collection roles."""
  roles: [String!]!
}

"""Input to retrieve the given detailed account for."""
input GetAccountDetailedInput {
  """Address to retrieve the corresponding detailed account for."""
  address: String = ""
}

"""Input to retrieve the given accounts for."""
input GetAccountsInput {
  """Number of accounts to skip for the given result set."""
  from: Float = 0

  """Number of accounts to retrieve for the given result set."""
  size: Float = 25
}

"""Input to retrieve the given NFT collection for."""
input GetNftCollectionInput {
  """
  Collection identifier to retrieve the corresponding NFT collection for.
  """
  collection: ID = ""
}

"""Input to retrieve the given NFT collections count for."""
input GetNftCollectionsCountInput {
  """Can add quantity to retrieve for the given result set."""
  canAddQuantity: String

  """Can add URI to retrieve for the given result set."""
  canAddUri: String

  """Can burn to retrieve for the given result set."""
  canBurn: String

  """Can transfer role to retrieve for the given result set."""
  canTransferRole: String

  """Can update attributes to retrieve for the given result set."""
  canUpdateAttributes: String

  """Collection identifier to retrieve for the given result set."""
  search: ID

  """NFT types list to retrieve for the given result set."""
  type: [NftType!]
}

"""Input to retrieve the given NFT collections for."""
input GetNftCollectionsInput {
  """After timestamp to retrieve for the given result set."""
  after: Float

  """Before timestamp to retrieve for the given result set."""
  before: Float

  """Can add quantity to retrieve for the given result set."""
  canAddQuantity: String

  """Can add URI to retrieve for the given result set."""
  canAddUri: String

  """Can burn to retrieve for the given result set."""
  canBurn: String

  """Can transfer role to retrieve for the given result set."""
  canTransferRole: String

  """Can update attributes to retrieve for the given result set."""
  canUpdateAttributes: String

  """Number of NFT collections to skip for the given result set."""
  from: Float = 0

  """
  Collection comma-separated identifiers to retrieve for the given result set.
  """
  identifiers: [ID!]

  """Collection identifier to retrieve for the given result set."""
  search: ID

  """Number of NFT collections to retrieve for the given result set."""
  size: Float = 25

  """NFT types list to retrieve for the given result set."""
  type: [NftType!]
}

"""Input to retrieve the given NFT for."""
input GetNftInput {
  """Identifier to retrieve the corresponding NFT for."""
  identifier: ID = ""
}

"""Input to retrieve the given NFTs count for."""
input GetNftsCountInput {
  """After timestamp to retrieve for the given result set."""
  after: Float

  """Before timestamp to retrieve for the given result set."""
  before: Float

  """Collection identifier for the given result set."""
  collection: ID = ""

  """Creator to retrieve for the given result set."""
  creator: String

  """Has URIs to retrieve for the given result set."""
  hasUris: Boolean

  """
  NFT comma-separated identifiers list to retrieve for the given result set.
  """
  identifiers: [ID!]

  """Is NSFW to retrieve for the given result set."""
  isNsfw: Boolean

  """Is whitelisted storage to retrieve for the given result set."""
  isWhitelistedStorage: Boolean

  """Name to retrieve for the given result set."""
  name: String

  """NFT identifier to retrieve for the given result set."""
  search: String

  """Tags list to retrieve for the given result set."""
  tags: [String!]

  """NFT type to retrieve for the given result set."""
  type: NftType
}

"""Input to retrieve the given NFTs for."""
input GetNftsInput {
  """After timestamp to retrieve for the given result set."""
  after: Float

  """Before timestamp to retrieve for the given result set."""
  before: Float

  """Collection identifier for the given result set."""
  collection: ID = ""

  """Creator to retrieve for the given result set."""
  creator: String

  """Number of collections to skip for the given result set."""
  from: Float = 0

  """Has URIs to retrieve for the given result set."""
  hasUris: Boolean

  """
  NFT comma-separated identifiers list to retrieve for the given result set.
  """
  identifiers: [ID!]

  """Is NSFW to retrieve for the given result set."""
  isNsfw: Boolean

  """Is whitelisted storage to retrieve for the given result set."""
  isWhitelistedStorage: Boolean

  """Name to retrieve for the given result set."""
  name: String

  """NFT identifier to retrieve for the given result set."""
  search: String

  """Number of collections to retrieve for the given result set."""
  size: Float = 25

  """Tags list to retrieve for the given result set."""
  tags: [String!]

  """NFT type to retrieve for the given result set."""
  type: NftType

  """With owner to retrieve for the given result set."""
  withOwner: Boolean

  """With supply to retrieve for the given result set."""
  withSupply: Boolean
}

"""Input to retrieve the given detailed transaction for."""
input GetTransactionDetailedInput {
  """Hash to retrieve the corresponding detailed transaction for."""
  hash: String = ""
}

"""Input to retrieve the given transactions count for."""
input GetTransactionsCountInput {
  """After timestamp for the given result set."""
  after: Float

  """Before timestamp for the given result set."""
  before: Float

  """Condition for ElasticSearch queries for the given result set."""
  condition: String

  """Filter transactions by function name for the given result set."""
  function: String

  """
  Filter by a comma-separated list of transaction hashes for the given result set.
  """
  hashes: [String!]

  """Mini block hash for the given result set."""
  miniBlockHash: String

  """Receiver for the given result set."""
  receiver: String

  """Receiver shard for the given result set."""
  receiverShard: Float

  """Search in data object for the given result set."""
  search: String

  """Sender for the given result set."""
  sender: String

  """Sender shard for the given result set."""
  senderShard: Float

  """Status of the transaction for the given result set."""
  status: TransactionStatus

  """Token identfier for the given result set."""
  token: String
}

"""Input to retrieve the given transactions for."""
input GetTransactionsInput {
  """After timestamp for the given result set."""
  after: Float

  """Before timestamp for the given result set."""
  before: Float

  """Sort order for the given result set."""
  condition: SortOrder

  """Number of transactions to skip for the given result set."""
  from: Float = 0

  """Filter transactions by function name for the given result set."""
  function: String

  """
  Filter by a comma-separated list of transaction hashes for the given result set.
  """
  hashes: [String!]

  """Mini block hash for the given result set."""
  miniBlockHash: String

  """Receiver for the given result set."""
  receiver: String

  """Receiver shard for the given result set."""
  receiverShard: Float

  """Search in data object for the given result set."""
  search: String

  """Sender for the given result set."""
  sender: String

  """Sender shard for the given result set."""
  senderShard: Float

  """Number of transactions to retrieve for the given result set."""
  size: Float = 25

  """Status of the transaction for the given result set."""
  status: TransactionStatus

  """Token identfier for the given result set."""
  token: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""NFT object type."""
type Nft {
  """Assets for the given NFT."""
  assets: TokenAssets

  """Attributes for the given NFT."""
  attributes: String

  """Balance for the given NFT."""
  balance: String

  """NFT collection for the given NFT."""
  collection: NftCollection!

  """Creator for the given NFT."""
  creator: String!

  """Decimals for the given NFT."""
  decimals: Float

  """Identifier for the given NFT."""
  identifier: ID!

  """Is NSFW for the given NFT."""
  isNsfw: Boolean

  """Is whitelisted storage for the given NFT."""
  isWhitelistedStorage: Boolean!

  """NFT media for the given NFT."""
  media: [NftMedia!]

  """Metadata for the given NFT."""
  metadata: NftMetadata

  """Name for the given NFT."""
  name: String!

  """Nonce for the given NFT."""
  nonce: Float!

  """Owner for the given NFT."""
  owner: String

  """Rank for the given NFT."""
  rank: Float

  """Royalties for the given NFT."""
  royalties: Float

  """Scam information for the given NFT."""
  scamInfo: ScamInformation

  """Score for the given NFT."""
  score: Float

  """Supply for the given NFT."""
  supply: String

  """Tags for the given NFT."""
  tags: [String!]!

  """Thumbnail URL for the given NFT."""
  thumbnailUrl: String!

  """Ticker for the given NFT."""
  ticker: String!

  """Timestamp for the given NFT."""
  timestamp: Float

  """NFT type for the given NFT."""
  type: NftType!

  """Unlock mile stone model for the given NFT."""
  unlockSchedule: [UnlockMileStoneModel!]

  """URIs for the given NFT."""
  uris: [String!]!

  """URL for the given NFT."""
  url: String!
}

"""NFT collection object type."""
type NftCollection {
  """Assets for the given NFT collection."""
  assets: TokenAssets

  """If the given NFT collection can freeze."""
  canFreeze: Boolean

  """If the given NFT collection can pause."""
  canPause: Boolean

  """If the given NFT collection can transfer NFT create role."""
  canTransferNftCreateRole: Boolean

  """If the given NFT collection can wipe."""
  canWipe: Boolean

  """Collection identifier for the given NFT collection."""
  collection: ID!

  """Decimals for the given NFT collection."""
  decimals: Float

  """Name for the given NFT collection."""
  name: String!

  """Owner for the given NFT collection."""
  owner: String

  """Roles list for the given NFT collection."""
  roles: [CollectionRoles!]

  """Ticker for the given NFT collection."""
  ticker: ID!

  """Timestamp for the given NFT collection."""
  timestamp: Float!

  """NFT type for the given NFT collection."""
  type: NftType!
}

"""NFT media object type."""
type NftMedia {
  """File size for the given NFT media."""
  fileSize: Float!

  """File type for the given NFT media."""
  fileType: String!

  """Original URL for the given NFT media."""
  originalUrl: String!

  """Thumbnail URL for the given NFT media."""
  thumbnailUrl: String!

  """URL for the given NFT media."""
  url: String!
}

"""NFT metadata object type."""
type NftMetadata {
  """Description for the given NFT metadata."""
  description: String!

  """File name for the given NFT metadata."""
  fileName: String!

  """File type for the given NFT metadata."""
  fileType: String!

  """File URI for the given NFT metadata."""
  fileUri: String!
}

"""NFT type."""
enum NftType {
  """Meta ESDT NFT type."""
  MetaESDT

  """Non-fungible NFT type."""
  NonFungibleESDT

  """Semi-fungible NFT type."""
  SemiFungibleESDT
}

type Query {
  """Retrieve the detailed account for the given input."""
  account(
    """Input to retrieve the given detailed account for."""
    input: GetAccountDetailedInput!
  ): AccountDetailed

  """Retrieve all accounts for the given input."""
  accounts(
    """Input to retrieve the given accounts for."""
    input: GetAccountsInput!
  ): [Account!]!

  """Retrieve all accounts count."""
  accountsCount: Float!

  """Retrieve the NFT collection for the given input."""
  collection(
    """Input to retrieve the given NFT collection for."""
    input: GetNftCollectionInput!
  ): NftCollection

  """Retrieve all NFT collections for the given input."""
  collections(
    """Input to retrieve the given NFT collections for."""
    input: GetNftCollectionsInput!
  ): [NftCollection!]!

  """Retrieve all NFT collections count for the given input."""
  collectionsCount(
    """Input to retrieve the given NFT collections count for."""
    input: GetNftCollectionsCountInput!
  ): Float!

  """Retrieve the NFT for the given input."""
  nft(
    """Input to retrieve the given NFT for."""
    input: GetNftInput!
  ): Nft

  """Retrieve all NFTs for the given input."""
  nfts(
    """Input to retrieve the given NFTs for."""
    input: GetNftsInput!
  ): [Nft!]!

  """Retrieve all NFTs count for the given input."""
  nftsCount(
    """Input to retrieve the given NFTs count for."""
    input: GetNftsCountInput!
  ): Float!

  """Retrieve the detailed transaction for the given input."""
  transaction(
    """Input to retrieve the given detailed transaction for."""
    input: GetTransactionDetailedInput!
  ): TransactionDetailed

  """Retrieve all transactions available for the given input."""
  transactions(
    """Input to retrieve the given transactions for."""
    input: GetTransactionsInput!
  ): [TransactionDetailed!]!

  """Retrieve all transactions count for the given input."""
  transactionsCount(
    """Input to retrieve the given transactions count for."""
    input: GetTransactionsCountInput!
  ): Float!
}

"""Scam information object type."""
type ScamInformation {
  """Information for the given scam."""
  info: String

  """Type for the given scam information."""
  type: ScamType!
}

"""Scam type object type."""
enum ScamType {
  """No scam type."""
  none

  """Potential scam type."""
  potentialScam

  """Scam type."""
  scam
}

"""Smart contract result object type."""
type SmartContractResult {
  """Transaction action for the given smart contract result."""
  action: TransactionAction

  """Call type for the given smart contract result."""
  callType: String!

  """Data for the given smart contract result."""
  data: String!

  """Gas limit for the given smart contract result."""
  gasLimit: Float!

  """Gas price for the given smart contract result."""
  gasPrice: Float!

  """Hash for the given smart contract result."""
  hash: ID

  """Transaction logs for the given smart contract result."""
  logs: TransactionLog

  """Mini block hash for the given smart contract result."""
  miniBlockHash: String

  """Nonce for the given smart contract result."""
  nonce: Float!

  """Original transaction hash for the given smart contract result."""
  originalTxHash: String!

  """Previous transaction hash for the given smart contract result."""
  prevTxHash: String!

  """Receiver address for the given smart contract result."""
  receiver: String!

  """Receiver assets for the given smart contract result."""
  receiverAssets: AccountAssets!

  """Relayed value for the given smart contract result."""
  relayedValue: String!

  """Return message for the given smart contract result."""
  returnMessage: String

  """Sender address for the given smart contract result."""
  sender: String!

  """Sender assets for the given smart contract result."""
  senderAssets: AccountAssets!

  """Timestamp for the given smart contract result."""
  timestamp: Float!

  """Value for the given smart contract result."""
  value: String!
}

"""Sort order object type."""
enum SortOrder {
  """Ascending order."""
  asc

  """Descending order."""
  desc
}

"""Token assets object type."""
type TokenAssets {
  """Description for the given token assets."""
  description: String!

  """Extra tokens for the given token assets."""
  extraTokens: [String!]

  """Locked accounts for the given token assets."""
  lockedAccounts: JSON

  """PNG URL for the given token assets."""
  pngUrl: String!

  """Status for the given token assets."""
  status: String!

  """SVG URL for the given token assets."""
  svgUrl: String!

  """Website for the given token assets."""
  website: String!
}

"""Token type object type."""
enum TokenType {
  """Fungible ESDT token type."""
  FungibleESDT

  """Meta ESDT token type."""
  MetaESDT

  """Non-fungible ESDT token type."""
  NonFungibleESDT

  """Semi-fungible ESDT token type."""
  SemiFungibleESDT
}

"""Transaction action object type."""
type TransactionAction {
  """Description for the given transaction action."""
  arguments: JSON

  """Category for the given transaction action."""
  category: String!

  """Description for the given transaction action."""
  description: String!

  """Name for the given transaction action."""
  name: String!
}

"""Detailed Transaction object type that extends Transaction."""
type TransactionDetailed {
  """Transaction action for the given transaction."""
  action: TransactionAction

  """Data for the given transaction."""
  data: String

  """Fee for the given transaction."""
  fee: String

  """Function for the given transaction."""
  function: String

  """Gas limit for the given transaction."""
  gasLimit: Float

  """Gas price for the given transaction."""
  gasPrice: Float

  """Gas used for the given transaction."""
  gasUsed: Float

  """Transaction log for the given detailed transaction."""
  logs: TransactionLog

  """Mini block hash for the given transaction."""
  miniBlockHash: String

  """Nonce for the given transaction."""
  nonce: Float

  """Transaction operations for the given detailed transaction."""
  operations: [TransactionOperation!]

  """Pending results for the given transaction."""
  pendingResults: Boolean

  """Price for the given detailed transaction."""
  price: Float

  """Transaction receipt for the given detailed transaction."""
  receipt: TransactionReceipt

  """Receiver account for the given detailed transaction."""
  receiver: Account!

  """Smart contract results for the given detailed transaction."""
  results: [SmartContractResult!]

  """Round for the given transaction."""
  round: Float

  """Scam information for the given transaction."""
  scamInfo: ScamInformation

  """Sender account for the given detailed transaction."""
  sender: Account!

  """Signature for the given transaction."""
  signature: String

  """Status for the given transaction."""
  status: String!

  """Timestamp for the given transaction."""
  timestamp: Float!

  """Hash for the given transaction."""
  txHash: ID!

  """Value for the given transaction."""
  value: String!
}

"""Transaction log object type."""
type TransactionLog {
  """Address for the given transaction log."""
  address: String!

  """Account assets for the given transaction log."""
  addressAssets: AccountAssets

  """Transaction log events list for the given transaction log."""
  events: [TransactionLogEvent!]!

  """Identifier for the given transaction log."""
  id: ID!
}

"""Transaction log event object type."""
type TransactionLogEvent {
  """Address for the given transaction log event."""
  address: String!

  """Address assets for the given transaction log event."""
  addressAssets: AccountAssets!

  """Data for the given transaction log event."""
  data: String

  """Identifier for the given transaction log event."""
  identifier: ID!

  """Topics list for the given transaction log event."""
  topics: [String!]!
}

"""Transaction operation object type."""
type TransactionOperation {
  """Transaction operation action for the transaction operation."""
  action: TransactionOperationAction!

  """Collection for the transaction operation."""
  collection: String!

  """Data for the transaction operation."""
  data: String

  """Decimals for the transaction operation."""
  decimals: Float

  """ESDT type for the transaction operation."""
  esdtType: TokenType

  """Identifier for the transaction operation."""
  id: ID!

  """Identifier for the transaction operation."""
  identifier: String!

  """Message for the transaction operation."""
  message: String

  """Name for the transaction operation."""
  name: String

  """Receiver address for the transaction operation."""
  receiver: String!

  """Receiver account assets for the transaction operation."""
  receiverAssets: AccountAssets

  """Sender address for the transaction operation."""
  sender: String!

  """Sender account assets for the transaction operation."""
  senderAssets: AccountAssets

  """SVG URL for the transaction operation."""
  svgUrl: String

  """Transaction operation type for the transaction operation."""
  type: TransactionOperationType!

  """Value for the transaction operation."""
  value: String
}

"""Transaction operation action object type."""
enum TransactionOperationAction {
  """Add quantity operation action."""
  addQuantity

  """Burn operation action."""
  burn

  """Create operation action."""
  create

  """Freeze operation action."""
  freeze

  """Local burn operation action."""
  localBurn

  """Local mint operation action."""
  localMint

  """No operation operation action."""
  none

  """Signal error operation action."""
  signalError

  """Transafer operation action."""
  transfer

  """Transfer only value operation action."""
  transferValueOnly

  """Wipe operation action."""
  wipe

  """Write log operation action."""
  writeLog
}

"""Transaction operation type object type."""
enum TransactionOperationType {
  """EGLD operation type."""
  egld

  """Error operation type."""
  error

  """ESDT operation type."""
  esdt

  """Log operation type."""
  log

  """NFT operation type."""
  nft

  """No operation type."""
  none
}

"""Transaction receipt object type."""
type TransactionReceipt {
  """Data for the given transaction receipt."""
  data: String!

  """Sender address for the given transaction receipt."""
  sender: String!

  """Value for the given transaction receipt."""
  value: String!
}

"""Transaction status object type."""
enum TransactionStatus {
  """Fail status."""
  fail

  """Invalid status."""
  invalid

  """Pending status."""
  pending

  """Success status."""
  success
}

"""Unlock mile stone model object type."""
type UnlockMileStoneModel {
  """Percent for the given unlock mile stone model."""
  percent: Float!

  """Remaining epochs for the given unlock mile stone model."""
  remainingEpochs: Float!
}